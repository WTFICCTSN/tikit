
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model UserType
 * 
 */
export type UserType = {
  id: string
  name: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  createdAt: Date
  updatedAt: Date
  id_userType: string | null
}

/**
 * Model Password
 * 
 */
export type Password = {
  hash: string
  userId: string
}

/**
 * Model Contact
 * 
 */
export type Contact = {
  id: string
  name: string
  info: string
  phone: boolean
  email: boolean
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: string
  first_name: string
  last_name: string
  id_user: string
  id_pic: string | null
}

/**
 * Model ContactsOnProfile
 * 
 */
export type ContactsOnProfile = {
  id_contact: string
  id_profile: string
  assignedAt: Date
  assignedBy: string
}

/**
 * Model Image
 * 
 */
export type Image = {
  id: string
  name: string
  url: string
  createdAt: Date
  createdBy: string
}

/**
 * Model PriorityType
 * 
 */
export type PriorityType = {
  id: string
  name: string
}

/**
 * Model Ticket
 * 
 */
export type Ticket = {
  id: string
  title: string
  desc: string
  id_ticket: string | null
  id_user: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ImageFromTicket
 * 
 */
export type ImageFromTicket = {
  id_ticket: string
  id_imagem: string
  assignedAt: Date
  assignedBy: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more UserTypes
 * const userTypes = await prisma.userType.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more UserTypes
   * const userTypes = await prisma.userType.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.userType`: Exposes CRUD operations for the **UserType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTypes
    * const userTypes = await prisma.userType.findMany()
    * ```
    */
  get userType(): Prisma.UserTypeDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.password`: Exposes CRUD operations for the **Password** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passwords
    * const passwords = await prisma.password.findMany()
    * ```
    */
  get password(): Prisma.PasswordDelegate<GlobalReject>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.contactsOnProfile`: Exposes CRUD operations for the **ContactsOnProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactsOnProfiles
    * const contactsOnProfiles = await prisma.contactsOnProfile.findMany()
    * ```
    */
  get contactsOnProfile(): Prisma.ContactsOnProfileDelegate<GlobalReject>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<GlobalReject>;

  /**
   * `prisma.priorityType`: Exposes CRUD operations for the **PriorityType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriorityTypes
    * const priorityTypes = await prisma.priorityType.findMany()
    * ```
    */
  get priorityType(): Prisma.PriorityTypeDelegate<GlobalReject>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<GlobalReject>;

  /**
   * `prisma.imageFromTicket`: Exposes CRUD operations for the **ImageFromTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageFromTickets
    * const imageFromTickets = await prisma.imageFromTicket.findMany()
    * ```
    */
  get imageFromTicket(): Prisma.ImageFromTicketDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    UserType: 'UserType',
    User: 'User',
    Password: 'Password',
    Contact: 'Contact',
    Profile: 'Profile',
    ContactsOnProfile: 'ContactsOnProfile',
    Image: 'Image',
    PriorityType: 'PriorityType',
    Ticket: 'Ticket',
    ImageFromTicket: 'ImageFromTicket'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserTypeCountOutputType
   */


  export type UserTypeCountOutputType = {
    users: number
  }

  export type UserTypeCountOutputTypeSelect = {
    users?: boolean
  }

  export type UserTypeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserTypeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserTypeCountOutputType
    : S extends undefined
    ? never
    : S extends UserTypeCountOutputTypeArgs
    ?'include' extends U
    ? UserTypeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserTypeCountOutputType ? UserTypeCountOutputType[P] : never
  } 
    : UserTypeCountOutputType
  : UserTypeCountOutputType




  // Custom InputTypes

  /**
   * UserTypeCountOutputType without action
   */
  export type UserTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserTypeCountOutputType
     * 
    **/
    select?: UserTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Ticket: number
  }

  export type UserCountOutputTypeSelect = {
    Ticket?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ContactCountOutputType
   */


  export type ContactCountOutputType = {
    profiles: number
  }

  export type ContactCountOutputTypeSelect = {
    profiles?: boolean
  }

  export type ContactCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ContactCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ContactCountOutputType
    : S extends undefined
    ? never
    : S extends ContactCountOutputTypeArgs
    ?'include' extends U
    ? ContactCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ContactCountOutputType ? ContactCountOutputType[P] : never
  } 
    : ContactCountOutputType
  : ContactCountOutputType




  // Custom InputTypes

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ContactCountOutputType
     * 
    **/
    select?: ContactCountOutputTypeSelect | null
  }



  /**
   * Count Type ProfileCountOutputType
   */


  export type ProfileCountOutputType = {
    contacts: number
  }

  export type ProfileCountOutputTypeSelect = {
    contacts?: boolean
  }

  export type ProfileCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProfileCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProfileCountOutputType
    : S extends undefined
    ? never
    : S extends ProfileCountOutputTypeArgs
    ?'include' extends U
    ? ProfileCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProfileCountOutputType ? ProfileCountOutputType[P] : never
  } 
    : ProfileCountOutputType
  : ProfileCountOutputType




  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     * 
    **/
    select?: ProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type ImageCountOutputType
   */


  export type ImageCountOutputType = {
    TicketImg: number
  }

  export type ImageCountOutputTypeSelect = {
    TicketImg?: boolean
  }

  export type ImageCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ImageCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ImageCountOutputType
    : S extends undefined
    ? never
    : S extends ImageCountOutputTypeArgs
    ?'include' extends U
    ? ImageCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ImageCountOutputType ? ImageCountOutputType[P] : never
  } 
    : ImageCountOutputType
  : ImageCountOutputType




  // Custom InputTypes

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     * 
    **/
    select?: ImageCountOutputTypeSelect | null
  }



  /**
   * Count Type TicketCountOutputType
   */


  export type TicketCountOutputType = {
    imagens: number
    subtickets: number
  }

  export type TicketCountOutputTypeSelect = {
    imagens?: boolean
    subtickets?: boolean
  }

  export type TicketCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TicketCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TicketCountOutputType
    : S extends undefined
    ? never
    : S extends TicketCountOutputTypeArgs
    ?'include' extends U
    ? TicketCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TicketCountOutputType ? TicketCountOutputType[P] : never
  } 
    : TicketCountOutputType
  : TicketCountOutputType




  // Custom InputTypes

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TicketCountOutputType
     * 
    **/
    select?: TicketCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model UserType
   */


  export type AggregateUserType = {
    _count: UserTypeCountAggregateOutputType | null
    _min: UserTypeMinAggregateOutputType | null
    _max: UserTypeMaxAggregateOutputType | null
  }

  export type UserTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type UserTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type UserTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type UserTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type UserTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type UserTypeAggregateArgs = {
    /**
     * Filter which UserType to aggregate.
     * 
    **/
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTypes
    **/
    _count?: true | UserTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTypeMaxAggregateInputType
  }

  export type GetUserTypeAggregateType<T extends UserTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserType[P]>
      : GetScalarType<T[P], AggregateUserType[P]>
  }




  export type UserTypeGroupByArgs = {
    where?: UserTypeWhereInput
    orderBy?: Enumerable<UserTypeOrderByWithAggregationInput>
    by: Array<UserTypeScalarFieldEnum>
    having?: UserTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTypeCountAggregateInputType | true
    _min?: UserTypeMinAggregateInputType
    _max?: UserTypeMaxAggregateInputType
  }


  export type UserTypeGroupByOutputType = {
    id: string
    name: string
    _count: UserTypeCountAggregateOutputType | null
    _min: UserTypeMinAggregateOutputType | null
    _max: UserTypeMaxAggregateOutputType | null
  }

  type GetUserTypeGroupByPayload<T extends UserTypeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTypeGroupByOutputType[P]>
            : GetScalarType<T[P], UserTypeGroupByOutputType[P]>
        }
      >
    >


  export type UserTypeSelect = {
    id?: boolean
    name?: boolean
    users?: boolean | UserFindManyArgs
    _count?: boolean | UserTypeCountOutputTypeArgs
  }

  export type UserTypeInclude = {
    users?: boolean | UserFindManyArgs
    _count?: boolean | UserTypeCountOutputTypeArgs
  }

  export type UserTypeGetPayload<
    S extends boolean | null | undefined | UserTypeArgs,
    U = keyof S
      > = S extends true
        ? UserType
    : S extends undefined
    ? never
    : S extends UserTypeArgs | UserTypeFindManyArgs
    ?'include' extends U
    ? UserType  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof UserType ? UserType[P] : never
  } 
    : UserType
  : UserType


  type UserTypeCountArgs = Merge<
    Omit<UserTypeFindManyArgs, 'select' | 'include'> & {
      select?: UserTypeCountAggregateInputType | true
    }
  >

  export interface UserTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserType that matches the filter.
     * @param {UserTypeFindUniqueArgs} args - Arguments to find a UserType
     * @example
     * // Get one UserType
     * const userType = await prisma.userType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserType'> extends True ? CheckSelect<T, Prisma__UserTypeClient<UserType>, Prisma__UserTypeClient<UserTypeGetPayload<T>>> : CheckSelect<T, Prisma__UserTypeClient<UserType | null >, Prisma__UserTypeClient<UserTypeGetPayload<T> | null >>

    /**
     * Find the first UserType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeFindFirstArgs} args - Arguments to find a UserType
     * @example
     * // Get one UserType
     * const userType = await prisma.userType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserType'> extends True ? CheckSelect<T, Prisma__UserTypeClient<UserType>, Prisma__UserTypeClient<UserTypeGetPayload<T>>> : CheckSelect<T, Prisma__UserTypeClient<UserType | null >, Prisma__UserTypeClient<UserTypeGetPayload<T> | null >>

    /**
     * Find zero or more UserTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTypes
     * const userTypes = await prisma.userType.findMany()
     * 
     * // Get first 10 UserTypes
     * const userTypes = await prisma.userType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTypeWithIdOnly = await prisma.userType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserTypeFindManyArgs>(
      args?: SelectSubset<T, UserTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserType>>, PrismaPromise<Array<UserTypeGetPayload<T>>>>

    /**
     * Create a UserType.
     * @param {UserTypeCreateArgs} args - Arguments to create a UserType.
     * @example
     * // Create one UserType
     * const UserType = await prisma.userType.create({
     *   data: {
     *     // ... data to create a UserType
     *   }
     * })
     * 
    **/
    create<T extends UserTypeCreateArgs>(
      args: SelectSubset<T, UserTypeCreateArgs>
    ): CheckSelect<T, Prisma__UserTypeClient<UserType>, Prisma__UserTypeClient<UserTypeGetPayload<T>>>

    /**
     * Delete a UserType.
     * @param {UserTypeDeleteArgs} args - Arguments to delete one UserType.
     * @example
     * // Delete one UserType
     * const UserType = await prisma.userType.delete({
     *   where: {
     *     // ... filter to delete one UserType
     *   }
     * })
     * 
    **/
    delete<T extends UserTypeDeleteArgs>(
      args: SelectSubset<T, UserTypeDeleteArgs>
    ): CheckSelect<T, Prisma__UserTypeClient<UserType>, Prisma__UserTypeClient<UserTypeGetPayload<T>>>

    /**
     * Update one UserType.
     * @param {UserTypeUpdateArgs} args - Arguments to update one UserType.
     * @example
     * // Update one UserType
     * const userType = await prisma.userType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserTypeUpdateArgs>(
      args: SelectSubset<T, UserTypeUpdateArgs>
    ): CheckSelect<T, Prisma__UserTypeClient<UserType>, Prisma__UserTypeClient<UserTypeGetPayload<T>>>

    /**
     * Delete zero or more UserTypes.
     * @param {UserTypeDeleteManyArgs} args - Arguments to filter UserTypes to delete.
     * @example
     * // Delete a few UserTypes
     * const { count } = await prisma.userType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserTypeDeleteManyArgs>(
      args?: SelectSubset<T, UserTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTypes
     * const userType = await prisma.userType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserTypeUpdateManyArgs>(
      args: SelectSubset<T, UserTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserType.
     * @param {UserTypeUpsertArgs} args - Arguments to update or create a UserType.
     * @example
     * // Update or create a UserType
     * const userType = await prisma.userType.upsert({
     *   create: {
     *     // ... data to create a UserType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserType we want to update
     *   }
     * })
    **/
    upsert<T extends UserTypeUpsertArgs>(
      args: SelectSubset<T, UserTypeUpsertArgs>
    ): CheckSelect<T, Prisma__UserTypeClient<UserType>, Prisma__UserTypeClient<UserTypeGetPayload<T>>>

    /**
     * Count the number of UserTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeCountArgs} args - Arguments to filter UserTypes to count.
     * @example
     * // Count the number of UserTypes
     * const count = await prisma.userType.count({
     *   where: {
     *     // ... the filter for the UserTypes we want to count
     *   }
     * })
    **/
    count<T extends UserTypeCountArgs>(
      args?: Subset<T, UserTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTypeAggregateArgs>(args: Subset<T, UserTypeAggregateArgs>): PrismaPromise<GetUserTypeAggregateType<T>>

    /**
     * Group by UserType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTypeGroupByArgs['orderBy'] }
        : { orderBy?: UserTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTypeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserType findUnique
   */
  export type UserTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * Throw an Error if a UserType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserType to fetch.
     * 
    **/
    where: UserTypeWhereUniqueInput
  }


  /**
   * UserType findFirst
   */
  export type UserTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * Throw an Error if a UserType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserType to fetch.
     * 
    **/
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTypes.
     * 
    **/
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTypes.
     * 
    **/
    distinct?: Enumerable<UserTypeScalarFieldEnum>
  }


  /**
   * UserType findMany
   */
  export type UserTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * Filter, which UserTypes to fetch.
     * 
    **/
    where?: UserTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<UserTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTypes.
     * 
    **/
    cursor?: UserTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserTypeScalarFieldEnum>
  }


  /**
   * UserType create
   */
  export type UserTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * The data needed to create a UserType.
     * 
    **/
    data: XOR<UserTypeCreateInput, UserTypeUncheckedCreateInput>
  }


  /**
   * UserType update
   */
  export type UserTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * The data needed to update a UserType.
     * 
    **/
    data: XOR<UserTypeUpdateInput, UserTypeUncheckedUpdateInput>
    /**
     * Choose, which UserType to update.
     * 
    **/
    where: UserTypeWhereUniqueInput
  }


  /**
   * UserType updateMany
   */
  export type UserTypeUpdateManyArgs = {
    /**
     * The data used to update UserTypes.
     * 
    **/
    data: XOR<UserTypeUpdateManyMutationInput, UserTypeUncheckedUpdateManyInput>
    /**
     * Filter which UserTypes to update
     * 
    **/
    where?: UserTypeWhereInput
  }


  /**
   * UserType upsert
   */
  export type UserTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * The filter to search for the UserType to update in case it exists.
     * 
    **/
    where: UserTypeWhereUniqueInput
    /**
     * In case the UserType found by the `where` argument doesn't exist, create a new UserType with this data.
     * 
    **/
    create: XOR<UserTypeCreateInput, UserTypeUncheckedCreateInput>
    /**
     * In case the UserType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserTypeUpdateInput, UserTypeUncheckedUpdateInput>
  }


  /**
   * UserType delete
   */
  export type UserTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
    /**
     * Filter which UserType to delete.
     * 
    **/
    where: UserTypeWhereUniqueInput
  }


  /**
   * UserType deleteMany
   */
  export type UserTypeDeleteManyArgs = {
    /**
     * Filter which UserTypes to delete
     * 
    **/
    where?: UserTypeWhereInput
  }


  /**
   * UserType without action
   */
  export type UserTypeArgs = {
    /**
     * Select specific fields to fetch from the UserType
     * 
    **/
    select?: UserTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserTypeInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    id_userType: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    id_userType: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    createdAt: number
    updatedAt: number
    id_userType: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    id_userType?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    id_userType?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    id_userType?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    createdAt: Date
    updatedAt: Date
    id_userType: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userType?: boolean | UserTypeArgs
    id_userType?: boolean
    profile?: boolean | ProfileArgs
    password?: boolean | PasswordArgs
    Ticket?: boolean | TicketFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    userType?: boolean | UserTypeArgs
    profile?: boolean | ProfileArgs
    password?: boolean | PasswordArgs
    Ticket?: boolean | TicketFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'userType' ? UserTypeGetPayload<S['include'][P]> | null :
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'password' ? PasswordGetPayload<S['include'][P]> | null :
        P extends 'Ticket' ? Array < TicketGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'userType' ? UserTypeGetPayload<S['select'][P]> | null :
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'password' ? PasswordGetPayload<S['select'][P]> | null :
        P extends 'Ticket' ? Array < TicketGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userType<T extends UserTypeArgs = {}>(args?: Subset<T, UserTypeArgs>): CheckSelect<T, Prisma__UserTypeClient<UserType | null >, Prisma__UserTypeClient<UserTypeGetPayload<T> | null >>;

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    password<T extends PasswordArgs = {}>(args?: Subset<T, PasswordArgs>): CheckSelect<T, Prisma__PasswordClient<Password | null >, Prisma__PasswordClient<PasswordGetPayload<T> | null >>;

    Ticket<T extends TicketFindManyArgs = {}>(args?: Subset<T, TicketFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Ticket>>, PrismaPromise<Array<TicketGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Password
   */


  export type AggregatePassword = {
    _count: PasswordCountAggregateOutputType | null
    _min: PasswordMinAggregateOutputType | null
    _max: PasswordMaxAggregateOutputType | null
  }

  export type PasswordMinAggregateOutputType = {
    hash: string | null
    userId: string | null
  }

  export type PasswordMaxAggregateOutputType = {
    hash: string | null
    userId: string | null
  }

  export type PasswordCountAggregateOutputType = {
    hash: number
    userId: number
    _all: number
  }


  export type PasswordMinAggregateInputType = {
    hash?: true
    userId?: true
  }

  export type PasswordMaxAggregateInputType = {
    hash?: true
    userId?: true
  }

  export type PasswordCountAggregateInputType = {
    hash?: true
    userId?: true
    _all?: true
  }

  export type PasswordAggregateArgs = {
    /**
     * Filter which Password to aggregate.
     * 
    **/
    where?: PasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passwords to fetch.
     * 
    **/
    orderBy?: Enumerable<PasswordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passwords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passwords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Passwords
    **/
    _count?: true | PasswordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordMaxAggregateInputType
  }

  export type GetPasswordAggregateType<T extends PasswordAggregateArgs> = {
        [P in keyof T & keyof AggregatePassword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassword[P]>
      : GetScalarType<T[P], AggregatePassword[P]>
  }




  export type PasswordGroupByArgs = {
    where?: PasswordWhereInput
    orderBy?: Enumerable<PasswordOrderByWithAggregationInput>
    by: Array<PasswordScalarFieldEnum>
    having?: PasswordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordCountAggregateInputType | true
    _min?: PasswordMinAggregateInputType
    _max?: PasswordMaxAggregateInputType
  }


  export type PasswordGroupByOutputType = {
    hash: string
    userId: string
    _count: PasswordCountAggregateOutputType | null
    _min: PasswordMinAggregateOutputType | null
    _max: PasswordMaxAggregateOutputType | null
  }

  type GetPasswordGroupByPayload<T extends PasswordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PasswordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordGroupByOutputType[P]>
        }
      >
    >


  export type PasswordSelect = {
    hash?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }

  export type PasswordInclude = {
    user?: boolean | UserArgs
  }

  export type PasswordGetPayload<
    S extends boolean | null | undefined | PasswordArgs,
    U = keyof S
      > = S extends true
        ? Password
    : S extends undefined
    ? never
    : S extends PasswordArgs | PasswordFindManyArgs
    ?'include' extends U
    ? Password  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Password ? Password[P] : never
  } 
    : Password
  : Password


  type PasswordCountArgs = Merge<
    Omit<PasswordFindManyArgs, 'select' | 'include'> & {
      select?: PasswordCountAggregateInputType | true
    }
  >

  export interface PasswordDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Password that matches the filter.
     * @param {PasswordFindUniqueArgs} args - Arguments to find a Password
     * @example
     * // Get one Password
     * const password = await prisma.password.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PasswordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PasswordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Password'> extends True ? CheckSelect<T, Prisma__PasswordClient<Password>, Prisma__PasswordClient<PasswordGetPayload<T>>> : CheckSelect<T, Prisma__PasswordClient<Password | null >, Prisma__PasswordClient<PasswordGetPayload<T> | null >>

    /**
     * Find the first Password that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordFindFirstArgs} args - Arguments to find a Password
     * @example
     * // Get one Password
     * const password = await prisma.password.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PasswordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PasswordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Password'> extends True ? CheckSelect<T, Prisma__PasswordClient<Password>, Prisma__PasswordClient<PasswordGetPayload<T>>> : CheckSelect<T, Prisma__PasswordClient<Password | null >, Prisma__PasswordClient<PasswordGetPayload<T> | null >>

    /**
     * Find zero or more Passwords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passwords
     * const passwords = await prisma.password.findMany()
     * 
     * // Get first 10 Passwords
     * const passwords = await prisma.password.findMany({ take: 10 })
     * 
     * // Only select the `hash`
     * const passwordWithHashOnly = await prisma.password.findMany({ select: { hash: true } })
     * 
    **/
    findMany<T extends PasswordFindManyArgs>(
      args?: SelectSubset<T, PasswordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Password>>, PrismaPromise<Array<PasswordGetPayload<T>>>>

    /**
     * Create a Password.
     * @param {PasswordCreateArgs} args - Arguments to create a Password.
     * @example
     * // Create one Password
     * const Password = await prisma.password.create({
     *   data: {
     *     // ... data to create a Password
     *   }
     * })
     * 
    **/
    create<T extends PasswordCreateArgs>(
      args: SelectSubset<T, PasswordCreateArgs>
    ): CheckSelect<T, Prisma__PasswordClient<Password>, Prisma__PasswordClient<PasswordGetPayload<T>>>

    /**
     * Delete a Password.
     * @param {PasswordDeleteArgs} args - Arguments to delete one Password.
     * @example
     * // Delete one Password
     * const Password = await prisma.password.delete({
     *   where: {
     *     // ... filter to delete one Password
     *   }
     * })
     * 
    **/
    delete<T extends PasswordDeleteArgs>(
      args: SelectSubset<T, PasswordDeleteArgs>
    ): CheckSelect<T, Prisma__PasswordClient<Password>, Prisma__PasswordClient<PasswordGetPayload<T>>>

    /**
     * Update one Password.
     * @param {PasswordUpdateArgs} args - Arguments to update one Password.
     * @example
     * // Update one Password
     * const password = await prisma.password.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PasswordUpdateArgs>(
      args: SelectSubset<T, PasswordUpdateArgs>
    ): CheckSelect<T, Prisma__PasswordClient<Password>, Prisma__PasswordClient<PasswordGetPayload<T>>>

    /**
     * Delete zero or more Passwords.
     * @param {PasswordDeleteManyArgs} args - Arguments to filter Passwords to delete.
     * @example
     * // Delete a few Passwords
     * const { count } = await prisma.password.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PasswordDeleteManyArgs>(
      args?: SelectSubset<T, PasswordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passwords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passwords
     * const password = await prisma.password.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PasswordUpdateManyArgs>(
      args: SelectSubset<T, PasswordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Password.
     * @param {PasswordUpsertArgs} args - Arguments to update or create a Password.
     * @example
     * // Update or create a Password
     * const password = await prisma.password.upsert({
     *   create: {
     *     // ... data to create a Password
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Password we want to update
     *   }
     * })
    **/
    upsert<T extends PasswordUpsertArgs>(
      args: SelectSubset<T, PasswordUpsertArgs>
    ): CheckSelect<T, Prisma__PasswordClient<Password>, Prisma__PasswordClient<PasswordGetPayload<T>>>

    /**
     * Count the number of Passwords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordCountArgs} args - Arguments to filter Passwords to count.
     * @example
     * // Count the number of Passwords
     * const count = await prisma.password.count({
     *   where: {
     *     // ... the filter for the Passwords we want to count
     *   }
     * })
    **/
    count<T extends PasswordCountArgs>(
      args?: Subset<T, PasswordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Password.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordAggregateArgs>(args: Subset<T, PasswordAggregateArgs>): PrismaPromise<GetPasswordAggregateType<T>>

    /**
     * Group by Password.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordGroupByArgs['orderBy'] }
        : { orderBy?: PasswordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Password.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PasswordClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Password findUnique
   */
  export type PasswordFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * Throw an Error if a Password can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Password to fetch.
     * 
    **/
    where: PasswordWhereUniqueInput
  }


  /**
   * Password findFirst
   */
  export type PasswordFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * Throw an Error if a Password can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Password to fetch.
     * 
    **/
    where?: PasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passwords to fetch.
     * 
    **/
    orderBy?: Enumerable<PasswordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passwords.
     * 
    **/
    cursor?: PasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passwords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passwords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passwords.
     * 
    **/
    distinct?: Enumerable<PasswordScalarFieldEnum>
  }


  /**
   * Password findMany
   */
  export type PasswordFindManyArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * Filter, which Passwords to fetch.
     * 
    **/
    where?: PasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passwords to fetch.
     * 
    **/
    orderBy?: Enumerable<PasswordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Passwords.
     * 
    **/
    cursor?: PasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passwords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passwords.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PasswordScalarFieldEnum>
  }


  /**
   * Password create
   */
  export type PasswordCreateArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * The data needed to create a Password.
     * 
    **/
    data: XOR<PasswordCreateInput, PasswordUncheckedCreateInput>
  }


  /**
   * Password update
   */
  export type PasswordUpdateArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * The data needed to update a Password.
     * 
    **/
    data: XOR<PasswordUpdateInput, PasswordUncheckedUpdateInput>
    /**
     * Choose, which Password to update.
     * 
    **/
    where: PasswordWhereUniqueInput
  }


  /**
   * Password updateMany
   */
  export type PasswordUpdateManyArgs = {
    /**
     * The data used to update Passwords.
     * 
    **/
    data: XOR<PasswordUpdateManyMutationInput, PasswordUncheckedUpdateManyInput>
    /**
     * Filter which Passwords to update
     * 
    **/
    where?: PasswordWhereInput
  }


  /**
   * Password upsert
   */
  export type PasswordUpsertArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * The filter to search for the Password to update in case it exists.
     * 
    **/
    where: PasswordWhereUniqueInput
    /**
     * In case the Password found by the `where` argument doesn't exist, create a new Password with this data.
     * 
    **/
    create: XOR<PasswordCreateInput, PasswordUncheckedCreateInput>
    /**
     * In case the Password was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PasswordUpdateInput, PasswordUncheckedUpdateInput>
  }


  /**
   * Password delete
   */
  export type PasswordDeleteArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
    /**
     * Filter which Password to delete.
     * 
    **/
    where: PasswordWhereUniqueInput
  }


  /**
   * Password deleteMany
   */
  export type PasswordDeleteManyArgs = {
    /**
     * Filter which Passwords to delete
     * 
    **/
    where?: PasswordWhereInput
  }


  /**
   * Password without action
   */
  export type PasswordArgs = {
    /**
     * Select specific fields to fetch from the Password
     * 
    **/
    select?: PasswordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PasswordInclude | null
  }



  /**
   * Model Contact
   */


  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    name: string | null
    info: string | null
    phone: boolean | null
    email: boolean | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    name: string | null
    info: string | null
    phone: boolean | null
    email: boolean | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    name: number
    info: number
    phone: number
    email: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    name?: true
    info?: true
    phone?: true
    email?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    name?: true
    info?: true
    phone?: true
    email?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    name?: true
    info?: true
    phone?: true
    email?: true
    _all?: true
  }

  export type ContactAggregateArgs = {
    /**
     * Filter which Contact to aggregate.
     * 
    **/
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     * 
    **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs = {
    where?: ContactWhereInput
    orderBy?: Enumerable<ContactOrderByWithAggregationInput>
    by: Array<ContactScalarFieldEnum>
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }


  export type ContactGroupByOutputType = {
    id: string
    name: string
    info: string
    phone: boolean
    email: boolean
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect = {
    id?: boolean
    name?: boolean
    info?: boolean
    phone?: boolean
    email?: boolean
    profiles?: boolean | ContactsOnProfileFindManyArgs
    _count?: boolean | ContactCountOutputTypeArgs
  }

  export type ContactInclude = {
    profiles?: boolean | ContactsOnProfileFindManyArgs
    _count?: boolean | ContactCountOutputTypeArgs
  }

  export type ContactGetPayload<
    S extends boolean | null | undefined | ContactArgs,
    U = keyof S
      > = S extends true
        ? Contact
    : S extends undefined
    ? never
    : S extends ContactArgs | ContactFindManyArgs
    ?'include' extends U
    ? Contact  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profiles' ? Array < ContactsOnProfileGetPayload<S['include'][P]>>  :
        P extends '_count' ? ContactCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profiles' ? Array < ContactsOnProfileGetPayload<S['select'][P]>>  :
        P extends '_count' ? ContactCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Contact ? Contact[P] : never
  } 
    : Contact
  : Contact


  type ContactCountArgs = Merge<
    Omit<ContactFindManyArgs, 'select' | 'include'> & {
      select?: ContactCountAggregateInputType | true
    }
  >

  export interface ContactDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contact'> extends True ? CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>> : CheckSelect<T, Prisma__ContactClient<Contact | null >, Prisma__ContactClient<ContactGetPayload<T> | null >>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contact'> extends True ? CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>> : CheckSelect<T, Prisma__ContactClient<Contact | null >, Prisma__ContactClient<ContactGetPayload<T> | null >>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFindManyArgs>(
      args?: SelectSubset<T, ContactFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Contact>>, PrismaPromise<Array<ContactGetPayload<T>>>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs>(
      args: SelectSubset<T, ContactCreateArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs>(
      args: SelectSubset<T, ContactDeleteArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs>(
      args: SelectSubset<T, ContactUpdateArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs>(
      args?: SelectSubset<T, ContactDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs>(
      args: SelectSubset<T, ContactUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs>(
      args: SelectSubset<T, ContactUpsertArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profiles<T extends ContactsOnProfileFindManyArgs = {}>(args?: Subset<T, ContactsOnProfileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ContactsOnProfile>>, PrismaPromise<Array<ContactsOnProfileGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * Throw an Error if a Contact can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contact to fetch.
     * 
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * Throw an Error if a Contact can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contact to fetch.
     * 
    **/
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     * 
    **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     * 
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     * 
    **/
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact findMany
   */
  export type ContactFindManyArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * Filter, which Contacts to fetch.
     * 
    **/
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     * 
    **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     * 
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact create
   */
  export type ContactCreateArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * The data needed to create a Contact.
     * 
    **/
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }


  /**
   * Contact update
   */
  export type ContactUpdateArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * The data needed to update a Contact.
     * 
    **/
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     * 
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs = {
    /**
     * The data used to update Contacts.
     * 
    **/
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     * 
    **/
    where?: ContactWhereInput
  }


  /**
   * Contact upsert
   */
  export type ContactUpsertArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * The filter to search for the Contact to update in case it exists.
     * 
    **/
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     * 
    **/
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }


  /**
   * Contact delete
   */
  export type ContactDeleteArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
    /**
     * Filter which Contact to delete.
     * 
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs = {
    /**
     * Filter which Contacts to delete
     * 
    **/
    where?: ContactWhereInput
  }


  /**
   * Contact without action
   */
  export type ContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
     * 
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    id_user: string | null
    id_pic: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    id_user: string | null
    id_pic: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    id_user: number
    id_pic: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    id_user?: true
    id_pic?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    id_user?: true
    id_pic?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    id_user?: true
    id_pic?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: string
    first_name: string
    last_name: string
    id_user: string
    id_pic: string | null
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    contacts?: boolean | ContactsOnProfileFindManyArgs
    user?: boolean | UserArgs
    id_user?: boolean
    profilePic?: boolean | ImageArgs
    id_pic?: boolean
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileInclude = {
    contacts?: boolean | ContactsOnProfileFindManyArgs
    user?: boolean | UserArgs
    profilePic?: boolean | ImageArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'contacts' ? Array < ContactsOnProfileGetPayload<S['include'][P]>>  :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'profilePic' ? ImageGetPayload<S['include'][P]> | null :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'contacts' ? Array < ContactsOnProfileGetPayload<S['select'][P]>>  :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'profilePic' ? ImageGetPayload<S['select'][P]> | null :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    contacts<T extends ContactsOnProfileFindManyArgs = {}>(args?: Subset<T, ContactsOnProfileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ContactsOnProfile>>, PrismaPromise<Array<ContactsOnProfileGetPayload<T>>>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    profilePic<T extends ImageArgs = {}>(args?: Subset<T, ImageArgs>): CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model ContactsOnProfile
   */


  export type AggregateContactsOnProfile = {
    _count: ContactsOnProfileCountAggregateOutputType | null
    _min: ContactsOnProfileMinAggregateOutputType | null
    _max: ContactsOnProfileMaxAggregateOutputType | null
  }

  export type ContactsOnProfileMinAggregateOutputType = {
    id_contact: string | null
    id_profile: string | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type ContactsOnProfileMaxAggregateOutputType = {
    id_contact: string | null
    id_profile: string | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type ContactsOnProfileCountAggregateOutputType = {
    id_contact: number
    id_profile: number
    assignedAt: number
    assignedBy: number
    _all: number
  }


  export type ContactsOnProfileMinAggregateInputType = {
    id_contact?: true
    id_profile?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type ContactsOnProfileMaxAggregateInputType = {
    id_contact?: true
    id_profile?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type ContactsOnProfileCountAggregateInputType = {
    id_contact?: true
    id_profile?: true
    assignedAt?: true
    assignedBy?: true
    _all?: true
  }

  export type ContactsOnProfileAggregateArgs = {
    /**
     * Filter which ContactsOnProfile to aggregate.
     * 
    **/
    where?: ContactsOnProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactsOnProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ContactsOnProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContactsOnProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactsOnProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactsOnProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactsOnProfiles
    **/
    _count?: true | ContactsOnProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactsOnProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactsOnProfileMaxAggregateInputType
  }

  export type GetContactsOnProfileAggregateType<T extends ContactsOnProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateContactsOnProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactsOnProfile[P]>
      : GetScalarType<T[P], AggregateContactsOnProfile[P]>
  }




  export type ContactsOnProfileGroupByArgs = {
    where?: ContactsOnProfileWhereInput
    orderBy?: Enumerable<ContactsOnProfileOrderByWithAggregationInput>
    by: Array<ContactsOnProfileScalarFieldEnum>
    having?: ContactsOnProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactsOnProfileCountAggregateInputType | true
    _min?: ContactsOnProfileMinAggregateInputType
    _max?: ContactsOnProfileMaxAggregateInputType
  }


  export type ContactsOnProfileGroupByOutputType = {
    id_contact: string
    id_profile: string
    assignedAt: Date
    assignedBy: string
    _count: ContactsOnProfileCountAggregateOutputType | null
    _min: ContactsOnProfileMinAggregateOutputType | null
    _max: ContactsOnProfileMaxAggregateOutputType | null
  }

  type GetContactsOnProfileGroupByPayload<T extends ContactsOnProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContactsOnProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactsOnProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactsOnProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ContactsOnProfileGroupByOutputType[P]>
        }
      >
    >


  export type ContactsOnProfileSelect = {
    contact?: boolean | ContactArgs
    id_contact?: boolean
    profile?: boolean | ProfileArgs
    id_profile?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
  }

  export type ContactsOnProfileInclude = {
    contact?: boolean | ContactArgs
    profile?: boolean | ProfileArgs
  }

  export type ContactsOnProfileGetPayload<
    S extends boolean | null | undefined | ContactsOnProfileArgs,
    U = keyof S
      > = S extends true
        ? ContactsOnProfile
    : S extends undefined
    ? never
    : S extends ContactsOnProfileArgs | ContactsOnProfileFindManyArgs
    ?'include' extends U
    ? ContactsOnProfile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'contact' ? ContactGetPayload<S['include'][P]> :
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'contact' ? ContactGetPayload<S['select'][P]> :
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :  P extends keyof ContactsOnProfile ? ContactsOnProfile[P] : never
  } 
    : ContactsOnProfile
  : ContactsOnProfile


  type ContactsOnProfileCountArgs = Merge<
    Omit<ContactsOnProfileFindManyArgs, 'select' | 'include'> & {
      select?: ContactsOnProfileCountAggregateInputType | true
    }
  >

  export interface ContactsOnProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ContactsOnProfile that matches the filter.
     * @param {ContactsOnProfileFindUniqueArgs} args - Arguments to find a ContactsOnProfile
     * @example
     * // Get one ContactsOnProfile
     * const contactsOnProfile = await prisma.contactsOnProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactsOnProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactsOnProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContactsOnProfile'> extends True ? CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile>, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T>>> : CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile | null >, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T> | null >>

    /**
     * Find the first ContactsOnProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsOnProfileFindFirstArgs} args - Arguments to find a ContactsOnProfile
     * @example
     * // Get one ContactsOnProfile
     * const contactsOnProfile = await prisma.contactsOnProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactsOnProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactsOnProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContactsOnProfile'> extends True ? CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile>, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T>>> : CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile | null >, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T> | null >>

    /**
     * Find zero or more ContactsOnProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsOnProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactsOnProfiles
     * const contactsOnProfiles = await prisma.contactsOnProfile.findMany()
     * 
     * // Get first 10 ContactsOnProfiles
     * const contactsOnProfiles = await prisma.contactsOnProfile.findMany({ take: 10 })
     * 
     * // Only select the `id_contact`
     * const contactsOnProfileWithId_contactOnly = await prisma.contactsOnProfile.findMany({ select: { id_contact: true } })
     * 
    **/
    findMany<T extends ContactsOnProfileFindManyArgs>(
      args?: SelectSubset<T, ContactsOnProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ContactsOnProfile>>, PrismaPromise<Array<ContactsOnProfileGetPayload<T>>>>

    /**
     * Create a ContactsOnProfile.
     * @param {ContactsOnProfileCreateArgs} args - Arguments to create a ContactsOnProfile.
     * @example
     * // Create one ContactsOnProfile
     * const ContactsOnProfile = await prisma.contactsOnProfile.create({
     *   data: {
     *     // ... data to create a ContactsOnProfile
     *   }
     * })
     * 
    **/
    create<T extends ContactsOnProfileCreateArgs>(
      args: SelectSubset<T, ContactsOnProfileCreateArgs>
    ): CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile>, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T>>>

    /**
     * Delete a ContactsOnProfile.
     * @param {ContactsOnProfileDeleteArgs} args - Arguments to delete one ContactsOnProfile.
     * @example
     * // Delete one ContactsOnProfile
     * const ContactsOnProfile = await prisma.contactsOnProfile.delete({
     *   where: {
     *     // ... filter to delete one ContactsOnProfile
     *   }
     * })
     * 
    **/
    delete<T extends ContactsOnProfileDeleteArgs>(
      args: SelectSubset<T, ContactsOnProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile>, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T>>>

    /**
     * Update one ContactsOnProfile.
     * @param {ContactsOnProfileUpdateArgs} args - Arguments to update one ContactsOnProfile.
     * @example
     * // Update one ContactsOnProfile
     * const contactsOnProfile = await prisma.contactsOnProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactsOnProfileUpdateArgs>(
      args: SelectSubset<T, ContactsOnProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile>, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T>>>

    /**
     * Delete zero or more ContactsOnProfiles.
     * @param {ContactsOnProfileDeleteManyArgs} args - Arguments to filter ContactsOnProfiles to delete.
     * @example
     * // Delete a few ContactsOnProfiles
     * const { count } = await prisma.contactsOnProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactsOnProfileDeleteManyArgs>(
      args?: SelectSubset<T, ContactsOnProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactsOnProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsOnProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactsOnProfiles
     * const contactsOnProfile = await prisma.contactsOnProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactsOnProfileUpdateManyArgs>(
      args: SelectSubset<T, ContactsOnProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ContactsOnProfile.
     * @param {ContactsOnProfileUpsertArgs} args - Arguments to update or create a ContactsOnProfile.
     * @example
     * // Update or create a ContactsOnProfile
     * const contactsOnProfile = await prisma.contactsOnProfile.upsert({
     *   create: {
     *     // ... data to create a ContactsOnProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactsOnProfile we want to update
     *   }
     * })
    **/
    upsert<T extends ContactsOnProfileUpsertArgs>(
      args: SelectSubset<T, ContactsOnProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ContactsOnProfileClient<ContactsOnProfile>, Prisma__ContactsOnProfileClient<ContactsOnProfileGetPayload<T>>>

    /**
     * Count the number of ContactsOnProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsOnProfileCountArgs} args - Arguments to filter ContactsOnProfiles to count.
     * @example
     * // Count the number of ContactsOnProfiles
     * const count = await prisma.contactsOnProfile.count({
     *   where: {
     *     // ... the filter for the ContactsOnProfiles we want to count
     *   }
     * })
    **/
    count<T extends ContactsOnProfileCountArgs>(
      args?: Subset<T, ContactsOnProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactsOnProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactsOnProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsOnProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactsOnProfileAggregateArgs>(args: Subset<T, ContactsOnProfileAggregateArgs>): PrismaPromise<GetContactsOnProfileAggregateType<T>>

    /**
     * Group by ContactsOnProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactsOnProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactsOnProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactsOnProfileGroupByArgs['orderBy'] }
        : { orderBy?: ContactsOnProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactsOnProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactsOnProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactsOnProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactsOnProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    contact<T extends ContactArgs = {}>(args?: Subset<T, ContactArgs>): CheckSelect<T, Prisma__ContactClient<Contact | null >, Prisma__ContactClient<ContactGetPayload<T> | null >>;

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ContactsOnProfile findUnique
   */
  export type ContactsOnProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * Throw an Error if a ContactsOnProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContactsOnProfile to fetch.
     * 
    **/
    where: ContactsOnProfileWhereUniqueInput
  }


  /**
   * ContactsOnProfile findFirst
   */
  export type ContactsOnProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * Throw an Error if a ContactsOnProfile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ContactsOnProfile to fetch.
     * 
    **/
    where?: ContactsOnProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactsOnProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ContactsOnProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactsOnProfiles.
     * 
    **/
    cursor?: ContactsOnProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactsOnProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactsOnProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactsOnProfiles.
     * 
    **/
    distinct?: Enumerable<ContactsOnProfileScalarFieldEnum>
  }


  /**
   * ContactsOnProfile findMany
   */
  export type ContactsOnProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * Filter, which ContactsOnProfiles to fetch.
     * 
    **/
    where?: ContactsOnProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactsOnProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ContactsOnProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactsOnProfiles.
     * 
    **/
    cursor?: ContactsOnProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactsOnProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactsOnProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContactsOnProfileScalarFieldEnum>
  }


  /**
   * ContactsOnProfile create
   */
  export type ContactsOnProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * The data needed to create a ContactsOnProfile.
     * 
    **/
    data: XOR<ContactsOnProfileCreateInput, ContactsOnProfileUncheckedCreateInput>
  }


  /**
   * ContactsOnProfile update
   */
  export type ContactsOnProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * The data needed to update a ContactsOnProfile.
     * 
    **/
    data: XOR<ContactsOnProfileUpdateInput, ContactsOnProfileUncheckedUpdateInput>
    /**
     * Choose, which ContactsOnProfile to update.
     * 
    **/
    where: ContactsOnProfileWhereUniqueInput
  }


  /**
   * ContactsOnProfile updateMany
   */
  export type ContactsOnProfileUpdateManyArgs = {
    /**
     * The data used to update ContactsOnProfiles.
     * 
    **/
    data: XOR<ContactsOnProfileUpdateManyMutationInput, ContactsOnProfileUncheckedUpdateManyInput>
    /**
     * Filter which ContactsOnProfiles to update
     * 
    **/
    where?: ContactsOnProfileWhereInput
  }


  /**
   * ContactsOnProfile upsert
   */
  export type ContactsOnProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * The filter to search for the ContactsOnProfile to update in case it exists.
     * 
    **/
    where: ContactsOnProfileWhereUniqueInput
    /**
     * In case the ContactsOnProfile found by the `where` argument doesn't exist, create a new ContactsOnProfile with this data.
     * 
    **/
    create: XOR<ContactsOnProfileCreateInput, ContactsOnProfileUncheckedCreateInput>
    /**
     * In case the ContactsOnProfile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContactsOnProfileUpdateInput, ContactsOnProfileUncheckedUpdateInput>
  }


  /**
   * ContactsOnProfile delete
   */
  export type ContactsOnProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
    /**
     * Filter which ContactsOnProfile to delete.
     * 
    **/
    where: ContactsOnProfileWhereUniqueInput
  }


  /**
   * ContactsOnProfile deleteMany
   */
  export type ContactsOnProfileDeleteManyArgs = {
    /**
     * Filter which ContactsOnProfiles to delete
     * 
    **/
    where?: ContactsOnProfileWhereInput
  }


  /**
   * ContactsOnProfile without action
   */
  export type ContactsOnProfileArgs = {
    /**
     * Select specific fields to fetch from the ContactsOnProfile
     * 
    **/
    select?: ContactsOnProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContactsOnProfileInclude | null
  }



  /**
   * Model Image
   */


  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    name: number
    url: number
    createdAt: number
    createdBy: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    createdAt?: true
    createdBy?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    createdAt?: true
    createdBy?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    createdAt?: true
    createdBy?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which Image to aggregate.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs = {
    where?: ImageWhereInput
    orderBy?: Enumerable<ImageOrderByWithAggregationInput>
    by: Array<ImageScalarFieldEnum>
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }


  export type ImageGroupByOutputType = {
    id: string
    name: string
    url: string
    createdAt: Date
    createdBy: string
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect = {
    id?: boolean
    name?: boolean
    url?: boolean
    createdAt?: boolean
    createdBy?: boolean
    Profile?: boolean | ProfileArgs
    TicketImg?: boolean | ImageFromTicketFindManyArgs
    _count?: boolean | ImageCountOutputTypeArgs
  }

  export type ImageInclude = {
    Profile?: boolean | ProfileArgs
    TicketImg?: boolean | ImageFromTicketFindManyArgs
    _count?: boolean | ImageCountOutputTypeArgs
  }

  export type ImageGetPayload<
    S extends boolean | null | undefined | ImageArgs,
    U = keyof S
      > = S extends true
        ? Image
    : S extends undefined
    ? never
    : S extends ImageArgs | ImageFindManyArgs
    ?'include' extends U
    ? Image  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'TicketImg' ? Array < ImageFromTicketGetPayload<S['include'][P]>>  :
        P extends '_count' ? ImageCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'TicketImg' ? Array < ImageFromTicketGetPayload<S['select'][P]>>  :
        P extends '_count' ? ImageCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Image ? Image[P] : never
  } 
    : Image
  : Image


  type ImageCountArgs = Merge<
    Omit<ImageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }
  >

  export interface ImageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Image'> extends True ? CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>> : CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs>(
      args?: SelectSubset<T, ImageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Image>>, PrismaPromise<Array<ImageGetPayload<T>>>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs>(
      args: SelectSubset<T, ImageCreateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs>(
      args: SelectSubset<T, ImageDeleteArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs>(
      args: SelectSubset<T, ImageUpdateArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs>(
      args?: SelectSubset<T, ImageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs>(
      args: SelectSubset<T, ImageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs>(
      args: SelectSubset<T, ImageUpsertArgs>
    ): CheckSelect<T, Prisma__ImageClient<Image>, Prisma__ImageClient<ImageGetPayload<T>>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    TicketImg<T extends ImageFromTicketFindManyArgs = {}>(args?: Subset<T, ImageFromTicketFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ImageFromTicket>>, PrismaPromise<Array<ImageFromTicketGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Throw an Error if a Image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Image to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     * 
    **/
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter, which Images to fetch.
     * 
    **/
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     * 
    **/
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * Image create
   */
  export type ImageCreateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to create a Image.
     * 
    **/
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The data needed to update a Image.
     * 
    **/
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs = {
    /**
     * The data used to update Images.
     * 
    **/
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * The filter to search for the Image to update in case it exists.
     * 
    **/
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     * 
    **/
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
    /**
     * Filter which Image to delete.
     * 
    **/
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs = {
    /**
     * Filter which Images to delete
     * 
    **/
    where?: ImageWhereInput
  }


  /**
   * Image without action
   */
  export type ImageArgs = {
    /**
     * Select specific fields to fetch from the Image
     * 
    **/
    select?: ImageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageInclude | null
  }



  /**
   * Model PriorityType
   */


  export type AggregatePriorityType = {
    _count: PriorityTypeCountAggregateOutputType | null
    _min: PriorityTypeMinAggregateOutputType | null
    _max: PriorityTypeMaxAggregateOutputType | null
  }

  export type PriorityTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type PriorityTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type PriorityTypeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PriorityTypeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PriorityTypeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PriorityTypeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PriorityTypeAggregateArgs = {
    /**
     * Filter which PriorityType to aggregate.
     * 
    **/
    where?: PriorityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriorityTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<PriorityTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PriorityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriorityTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriorityTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriorityTypes
    **/
    _count?: true | PriorityTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriorityTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriorityTypeMaxAggregateInputType
  }

  export type GetPriorityTypeAggregateType<T extends PriorityTypeAggregateArgs> = {
        [P in keyof T & keyof AggregatePriorityType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriorityType[P]>
      : GetScalarType<T[P], AggregatePriorityType[P]>
  }




  export type PriorityTypeGroupByArgs = {
    where?: PriorityTypeWhereInput
    orderBy?: Enumerable<PriorityTypeOrderByWithAggregationInput>
    by: Array<PriorityTypeScalarFieldEnum>
    having?: PriorityTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriorityTypeCountAggregateInputType | true
    _min?: PriorityTypeMinAggregateInputType
    _max?: PriorityTypeMaxAggregateInputType
  }


  export type PriorityTypeGroupByOutputType = {
    id: string
    name: string
    _count: PriorityTypeCountAggregateOutputType | null
    _min: PriorityTypeMinAggregateOutputType | null
    _max: PriorityTypeMaxAggregateOutputType | null
  }

  type GetPriorityTypeGroupByPayload<T extends PriorityTypeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PriorityTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriorityTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriorityTypeGroupByOutputType[P]>
            : GetScalarType<T[P], PriorityTypeGroupByOutputType[P]>
        }
      >
    >


  export type PriorityTypeSelect = {
    id?: boolean
    name?: boolean
  }

  export type PriorityTypeGetPayload<
    S extends boolean | null | undefined | PriorityTypeArgs,
    U = keyof S
      > = S extends true
        ? PriorityType
    : S extends undefined
    ? never
    : S extends PriorityTypeArgs | PriorityTypeFindManyArgs
    ?'include' extends U
    ? PriorityType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PriorityType ? PriorityType[P] : never
  } 
    : PriorityType
  : PriorityType


  type PriorityTypeCountArgs = Merge<
    Omit<PriorityTypeFindManyArgs, 'select' | 'include'> & {
      select?: PriorityTypeCountAggregateInputType | true
    }
  >

  export interface PriorityTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PriorityType that matches the filter.
     * @param {PriorityTypeFindUniqueArgs} args - Arguments to find a PriorityType
     * @example
     * // Get one PriorityType
     * const priorityType = await prisma.priorityType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PriorityTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PriorityTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PriorityType'> extends True ? CheckSelect<T, Prisma__PriorityTypeClient<PriorityType>, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T>>> : CheckSelect<T, Prisma__PriorityTypeClient<PriorityType | null >, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T> | null >>

    /**
     * Find the first PriorityType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityTypeFindFirstArgs} args - Arguments to find a PriorityType
     * @example
     * // Get one PriorityType
     * const priorityType = await prisma.priorityType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PriorityTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PriorityTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PriorityType'> extends True ? CheckSelect<T, Prisma__PriorityTypeClient<PriorityType>, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T>>> : CheckSelect<T, Prisma__PriorityTypeClient<PriorityType | null >, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T> | null >>

    /**
     * Find zero or more PriorityTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriorityTypes
     * const priorityTypes = await prisma.priorityType.findMany()
     * 
     * // Get first 10 PriorityTypes
     * const priorityTypes = await prisma.priorityType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priorityTypeWithIdOnly = await prisma.priorityType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PriorityTypeFindManyArgs>(
      args?: SelectSubset<T, PriorityTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PriorityType>>, PrismaPromise<Array<PriorityTypeGetPayload<T>>>>

    /**
     * Create a PriorityType.
     * @param {PriorityTypeCreateArgs} args - Arguments to create a PriorityType.
     * @example
     * // Create one PriorityType
     * const PriorityType = await prisma.priorityType.create({
     *   data: {
     *     // ... data to create a PriorityType
     *   }
     * })
     * 
    **/
    create<T extends PriorityTypeCreateArgs>(
      args: SelectSubset<T, PriorityTypeCreateArgs>
    ): CheckSelect<T, Prisma__PriorityTypeClient<PriorityType>, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T>>>

    /**
     * Delete a PriorityType.
     * @param {PriorityTypeDeleteArgs} args - Arguments to delete one PriorityType.
     * @example
     * // Delete one PriorityType
     * const PriorityType = await prisma.priorityType.delete({
     *   where: {
     *     // ... filter to delete one PriorityType
     *   }
     * })
     * 
    **/
    delete<T extends PriorityTypeDeleteArgs>(
      args: SelectSubset<T, PriorityTypeDeleteArgs>
    ): CheckSelect<T, Prisma__PriorityTypeClient<PriorityType>, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T>>>

    /**
     * Update one PriorityType.
     * @param {PriorityTypeUpdateArgs} args - Arguments to update one PriorityType.
     * @example
     * // Update one PriorityType
     * const priorityType = await prisma.priorityType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PriorityTypeUpdateArgs>(
      args: SelectSubset<T, PriorityTypeUpdateArgs>
    ): CheckSelect<T, Prisma__PriorityTypeClient<PriorityType>, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T>>>

    /**
     * Delete zero or more PriorityTypes.
     * @param {PriorityTypeDeleteManyArgs} args - Arguments to filter PriorityTypes to delete.
     * @example
     * // Delete a few PriorityTypes
     * const { count } = await prisma.priorityType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PriorityTypeDeleteManyArgs>(
      args?: SelectSubset<T, PriorityTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriorityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriorityTypes
     * const priorityType = await prisma.priorityType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PriorityTypeUpdateManyArgs>(
      args: SelectSubset<T, PriorityTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PriorityType.
     * @param {PriorityTypeUpsertArgs} args - Arguments to update or create a PriorityType.
     * @example
     * // Update or create a PriorityType
     * const priorityType = await prisma.priorityType.upsert({
     *   create: {
     *     // ... data to create a PriorityType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriorityType we want to update
     *   }
     * })
    **/
    upsert<T extends PriorityTypeUpsertArgs>(
      args: SelectSubset<T, PriorityTypeUpsertArgs>
    ): CheckSelect<T, Prisma__PriorityTypeClient<PriorityType>, Prisma__PriorityTypeClient<PriorityTypeGetPayload<T>>>

    /**
     * Count the number of PriorityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityTypeCountArgs} args - Arguments to filter PriorityTypes to count.
     * @example
     * // Count the number of PriorityTypes
     * const count = await prisma.priorityType.count({
     *   where: {
     *     // ... the filter for the PriorityTypes we want to count
     *   }
     * })
    **/
    count<T extends PriorityTypeCountArgs>(
      args?: Subset<T, PriorityTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriorityTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriorityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriorityTypeAggregateArgs>(args: Subset<T, PriorityTypeAggregateArgs>): PrismaPromise<GetPriorityTypeAggregateType<T>>

    /**
     * Group by PriorityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriorityTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriorityTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriorityTypeGroupByArgs['orderBy'] }
        : { orderBy?: PriorityTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriorityTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriorityTypeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriorityType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PriorityTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PriorityType findUnique
   */
  export type PriorityTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * Throw an Error if a PriorityType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PriorityType to fetch.
     * 
    **/
    where: PriorityTypeWhereUniqueInput
  }


  /**
   * PriorityType findFirst
   */
  export type PriorityTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * Throw an Error if a PriorityType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PriorityType to fetch.
     * 
    **/
    where?: PriorityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriorityTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<PriorityTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriorityTypes.
     * 
    **/
    cursor?: PriorityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriorityTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriorityTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriorityTypes.
     * 
    **/
    distinct?: Enumerable<PriorityTypeScalarFieldEnum>
  }


  /**
   * PriorityType findMany
   */
  export type PriorityTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * Filter, which PriorityTypes to fetch.
     * 
    **/
    where?: PriorityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriorityTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<PriorityTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriorityTypes.
     * 
    **/
    cursor?: PriorityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriorityTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriorityTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PriorityTypeScalarFieldEnum>
  }


  /**
   * PriorityType create
   */
  export type PriorityTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * The data needed to create a PriorityType.
     * 
    **/
    data: XOR<PriorityTypeCreateInput, PriorityTypeUncheckedCreateInput>
  }


  /**
   * PriorityType update
   */
  export type PriorityTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * The data needed to update a PriorityType.
     * 
    **/
    data: XOR<PriorityTypeUpdateInput, PriorityTypeUncheckedUpdateInput>
    /**
     * Choose, which PriorityType to update.
     * 
    **/
    where: PriorityTypeWhereUniqueInput
  }


  /**
   * PriorityType updateMany
   */
  export type PriorityTypeUpdateManyArgs = {
    /**
     * The data used to update PriorityTypes.
     * 
    **/
    data: XOR<PriorityTypeUpdateManyMutationInput, PriorityTypeUncheckedUpdateManyInput>
    /**
     * Filter which PriorityTypes to update
     * 
    **/
    where?: PriorityTypeWhereInput
  }


  /**
   * PriorityType upsert
   */
  export type PriorityTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * The filter to search for the PriorityType to update in case it exists.
     * 
    **/
    where: PriorityTypeWhereUniqueInput
    /**
     * In case the PriorityType found by the `where` argument doesn't exist, create a new PriorityType with this data.
     * 
    **/
    create: XOR<PriorityTypeCreateInput, PriorityTypeUncheckedCreateInput>
    /**
     * In case the PriorityType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PriorityTypeUpdateInput, PriorityTypeUncheckedUpdateInput>
  }


  /**
   * PriorityType delete
   */
  export type PriorityTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
    /**
     * Filter which PriorityType to delete.
     * 
    **/
    where: PriorityTypeWhereUniqueInput
  }


  /**
   * PriorityType deleteMany
   */
  export type PriorityTypeDeleteManyArgs = {
    /**
     * Filter which PriorityTypes to delete
     * 
    **/
    where?: PriorityTypeWhereInput
  }


  /**
   * PriorityType without action
   */
  export type PriorityTypeArgs = {
    /**
     * Select specific fields to fetch from the PriorityType
     * 
    **/
    select?: PriorityTypeSelect | null
  }



  /**
   * Model Ticket
   */


  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketMinAggregateOutputType = {
    id: string | null
    title: string | null
    desc: string | null
    id_ticket: string | null
    id_user: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TicketMaxAggregateOutputType = {
    id: string | null
    title: string | null
    desc: string | null
    id_ticket: string | null
    id_user: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    title: number
    desc: number
    id_ticket: number
    id_user: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TicketMinAggregateInputType = {
    id?: true
    title?: true
    desc?: true
    id_ticket?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    title?: true
    desc?: true
    id_ticket?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    title?: true
    desc?: true
    id_ticket?: true
    id_user?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TicketAggregateArgs = {
    /**
     * Filter which Ticket to aggregate.
     * 
    **/
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     * 
    **/
    orderBy?: Enumerable<TicketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs = {
    where?: TicketWhereInput
    orderBy?: Enumerable<TicketOrderByWithAggregationInput>
    by: Array<TicketScalarFieldEnum>
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }


  export type TicketGroupByOutputType = {
    id: string
    title: string
    desc: string
    id_ticket: string | null
    id_user: string
    createdAt: Date
    updatedAt: Date
    _count: TicketCountAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect = {
    id?: boolean
    title?: boolean
    desc?: boolean
    imagens?: boolean | ImageFromTicketFindManyArgs
    parentTicket?: boolean | TicketArgs
    id_ticket?: boolean
    subtickets?: boolean | TicketFindManyArgs
    user?: boolean | UserArgs
    id_user?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TicketCountOutputTypeArgs
  }

  export type TicketInclude = {
    imagens?: boolean | ImageFromTicketFindManyArgs
    parentTicket?: boolean | TicketArgs
    subtickets?: boolean | TicketFindManyArgs
    user?: boolean | UserArgs
    _count?: boolean | TicketCountOutputTypeArgs
  }

  export type TicketGetPayload<
    S extends boolean | null | undefined | TicketArgs,
    U = keyof S
      > = S extends true
        ? Ticket
    : S extends undefined
    ? never
    : S extends TicketArgs | TicketFindManyArgs
    ?'include' extends U
    ? Ticket  & {
    [P in TrueKeys<S['include']>]:
        P extends 'imagens' ? Array < ImageFromTicketGetPayload<S['include'][P]>>  :
        P extends 'parentTicket' ? TicketGetPayload<S['include'][P]> | null :
        P extends 'subtickets' ? Array < TicketGetPayload<S['include'][P]>>  :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? TicketCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'imagens' ? Array < ImageFromTicketGetPayload<S['select'][P]>>  :
        P extends 'parentTicket' ? TicketGetPayload<S['select'][P]> | null :
        P extends 'subtickets' ? Array < TicketGetPayload<S['select'][P]>>  :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? TicketCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Ticket ? Ticket[P] : never
  } 
    : Ticket
  : Ticket


  type TicketCountArgs = Merge<
    Omit<TicketFindManyArgs, 'select' | 'include'> & {
      select?: TicketCountAggregateInputType | true
    }
  >

  export interface TicketDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TicketFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TicketFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Ticket'> extends True ? CheckSelect<T, Prisma__TicketClient<Ticket>, Prisma__TicketClient<TicketGetPayload<T>>> : CheckSelect<T, Prisma__TicketClient<Ticket | null >, Prisma__TicketClient<TicketGetPayload<T> | null >>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TicketFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TicketFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Ticket'> extends True ? CheckSelect<T, Prisma__TicketClient<Ticket>, Prisma__TicketClient<TicketGetPayload<T>>> : CheckSelect<T, Prisma__TicketClient<Ticket | null >, Prisma__TicketClient<TicketGetPayload<T> | null >>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TicketFindManyArgs>(
      args?: SelectSubset<T, TicketFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Ticket>>, PrismaPromise<Array<TicketGetPayload<T>>>>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
    **/
    create<T extends TicketCreateArgs>(
      args: SelectSubset<T, TicketCreateArgs>
    ): CheckSelect<T, Prisma__TicketClient<Ticket>, Prisma__TicketClient<TicketGetPayload<T>>>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
    **/
    delete<T extends TicketDeleteArgs>(
      args: SelectSubset<T, TicketDeleteArgs>
    ): CheckSelect<T, Prisma__TicketClient<Ticket>, Prisma__TicketClient<TicketGetPayload<T>>>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TicketUpdateArgs>(
      args: SelectSubset<T, TicketUpdateArgs>
    ): CheckSelect<T, Prisma__TicketClient<Ticket>, Prisma__TicketClient<TicketGetPayload<T>>>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TicketDeleteManyArgs>(
      args?: SelectSubset<T, TicketDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TicketUpdateManyArgs>(
      args: SelectSubset<T, TicketUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
    **/
    upsert<T extends TicketUpsertArgs>(
      args: SelectSubset<T, TicketUpsertArgs>
    ): CheckSelect<T, Prisma__TicketClient<Ticket>, Prisma__TicketClient<TicketGetPayload<T>>>

    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TicketClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    imagens<T extends ImageFromTicketFindManyArgs = {}>(args?: Subset<T, ImageFromTicketFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ImageFromTicket>>, PrismaPromise<Array<ImageFromTicketGetPayload<T>>>>;

    parentTicket<T extends TicketArgs = {}>(args?: Subset<T, TicketArgs>): CheckSelect<T, Prisma__TicketClient<Ticket | null >, Prisma__TicketClient<TicketGetPayload<T> | null >>;

    subtickets<T extends TicketFindManyArgs = {}>(args?: Subset<T, TicketFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Ticket>>, PrismaPromise<Array<TicketGetPayload<T>>>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * Throw an Error if a Ticket can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Ticket to fetch.
     * 
    **/
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * Throw an Error if a Ticket can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Ticket to fetch.
     * 
    **/
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     * 
    **/
    orderBy?: Enumerable<TicketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     * 
    **/
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     * 
    **/
    distinct?: Enumerable<TicketScalarFieldEnum>
  }


  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * Filter, which Tickets to fetch.
     * 
    **/
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     * 
    **/
    orderBy?: Enumerable<TicketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     * 
    **/
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TicketScalarFieldEnum>
  }


  /**
   * Ticket create
   */
  export type TicketCreateArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * The data needed to create a Ticket.
     * 
    **/
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }


  /**
   * Ticket update
   */
  export type TicketUpdateArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * The data needed to update a Ticket.
     * 
    **/
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     * 
    **/
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs = {
    /**
     * The data used to update Tickets.
     * 
    **/
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     * 
    **/
    where?: TicketWhereInput
  }


  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     * 
    **/
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     * 
    **/
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }


  /**
   * Ticket delete
   */
  export type TicketDeleteArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
    /**
     * Filter which Ticket to delete.
     * 
    **/
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs = {
    /**
     * Filter which Tickets to delete
     * 
    **/
    where?: TicketWhereInput
  }


  /**
   * Ticket without action
   */
  export type TicketArgs = {
    /**
     * Select specific fields to fetch from the Ticket
     * 
    **/
    select?: TicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TicketInclude | null
  }



  /**
   * Model ImageFromTicket
   */


  export type AggregateImageFromTicket = {
    _count: ImageFromTicketCountAggregateOutputType | null
    _min: ImageFromTicketMinAggregateOutputType | null
    _max: ImageFromTicketMaxAggregateOutputType | null
  }

  export type ImageFromTicketMinAggregateOutputType = {
    id_ticket: string | null
    id_imagem: string | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type ImageFromTicketMaxAggregateOutputType = {
    id_ticket: string | null
    id_imagem: string | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type ImageFromTicketCountAggregateOutputType = {
    id_ticket: number
    id_imagem: number
    assignedAt: number
    assignedBy: number
    _all: number
  }


  export type ImageFromTicketMinAggregateInputType = {
    id_ticket?: true
    id_imagem?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type ImageFromTicketMaxAggregateInputType = {
    id_ticket?: true
    id_imagem?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type ImageFromTicketCountAggregateInputType = {
    id_ticket?: true
    id_imagem?: true
    assignedAt?: true
    assignedBy?: true
    _all?: true
  }

  export type ImageFromTicketAggregateArgs = {
    /**
     * Filter which ImageFromTicket to aggregate.
     * 
    **/
    where?: ImageFromTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageFromTickets to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageFromTicketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageFromTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageFromTickets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageFromTickets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ImageFromTickets
    **/
    _count?: true | ImageFromTicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageFromTicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageFromTicketMaxAggregateInputType
  }

  export type GetImageFromTicketAggregateType<T extends ImageFromTicketAggregateArgs> = {
        [P in keyof T & keyof AggregateImageFromTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageFromTicket[P]>
      : GetScalarType<T[P], AggregateImageFromTicket[P]>
  }




  export type ImageFromTicketGroupByArgs = {
    where?: ImageFromTicketWhereInput
    orderBy?: Enumerable<ImageFromTicketOrderByWithAggregationInput>
    by: Array<ImageFromTicketScalarFieldEnum>
    having?: ImageFromTicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageFromTicketCountAggregateInputType | true
    _min?: ImageFromTicketMinAggregateInputType
    _max?: ImageFromTicketMaxAggregateInputType
  }


  export type ImageFromTicketGroupByOutputType = {
    id_ticket: string
    id_imagem: string
    assignedAt: Date
    assignedBy: string
    _count: ImageFromTicketCountAggregateOutputType | null
    _min: ImageFromTicketMinAggregateOutputType | null
    _max: ImageFromTicketMaxAggregateOutputType | null
  }

  type GetImageFromTicketGroupByPayload<T extends ImageFromTicketGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageFromTicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageFromTicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageFromTicketGroupByOutputType[P]>
            : GetScalarType<T[P], ImageFromTicketGroupByOutputType[P]>
        }
      >
    >


  export type ImageFromTicketSelect = {
    ticket?: boolean | TicketArgs
    id_ticket?: boolean
    imagem?: boolean | ImageArgs
    id_imagem?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
  }

  export type ImageFromTicketInclude = {
    ticket?: boolean | TicketArgs
    imagem?: boolean | ImageArgs
  }

  export type ImageFromTicketGetPayload<
    S extends boolean | null | undefined | ImageFromTicketArgs,
    U = keyof S
      > = S extends true
        ? ImageFromTicket
    : S extends undefined
    ? never
    : S extends ImageFromTicketArgs | ImageFromTicketFindManyArgs
    ?'include' extends U
    ? ImageFromTicket  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ticket' ? TicketGetPayload<S['include'][P]> :
        P extends 'imagem' ? ImageGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ticket' ? TicketGetPayload<S['select'][P]> :
        P extends 'imagem' ? ImageGetPayload<S['select'][P]> :  P extends keyof ImageFromTicket ? ImageFromTicket[P] : never
  } 
    : ImageFromTicket
  : ImageFromTicket


  type ImageFromTicketCountArgs = Merge<
    Omit<ImageFromTicketFindManyArgs, 'select' | 'include'> & {
      select?: ImageFromTicketCountAggregateInputType | true
    }
  >

  export interface ImageFromTicketDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ImageFromTicket that matches the filter.
     * @param {ImageFromTicketFindUniqueArgs} args - Arguments to find a ImageFromTicket
     * @example
     * // Get one ImageFromTicket
     * const imageFromTicket = await prisma.imageFromTicket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFromTicketFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageFromTicketFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ImageFromTicket'> extends True ? CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket>, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T>>> : CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket | null >, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T> | null >>

    /**
     * Find the first ImageFromTicket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFromTicketFindFirstArgs} args - Arguments to find a ImageFromTicket
     * @example
     * // Get one ImageFromTicket
     * const imageFromTicket = await prisma.imageFromTicket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFromTicketFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageFromTicketFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ImageFromTicket'> extends True ? CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket>, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T>>> : CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket | null >, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T> | null >>

    /**
     * Find zero or more ImageFromTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFromTicketFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageFromTickets
     * const imageFromTickets = await prisma.imageFromTicket.findMany()
     * 
     * // Get first 10 ImageFromTickets
     * const imageFromTickets = await prisma.imageFromTicket.findMany({ take: 10 })
     * 
     * // Only select the `id_ticket`
     * const imageFromTicketWithId_ticketOnly = await prisma.imageFromTicket.findMany({ select: { id_ticket: true } })
     * 
    **/
    findMany<T extends ImageFromTicketFindManyArgs>(
      args?: SelectSubset<T, ImageFromTicketFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ImageFromTicket>>, PrismaPromise<Array<ImageFromTicketGetPayload<T>>>>

    /**
     * Create a ImageFromTicket.
     * @param {ImageFromTicketCreateArgs} args - Arguments to create a ImageFromTicket.
     * @example
     * // Create one ImageFromTicket
     * const ImageFromTicket = await prisma.imageFromTicket.create({
     *   data: {
     *     // ... data to create a ImageFromTicket
     *   }
     * })
     * 
    **/
    create<T extends ImageFromTicketCreateArgs>(
      args: SelectSubset<T, ImageFromTicketCreateArgs>
    ): CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket>, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T>>>

    /**
     * Delete a ImageFromTicket.
     * @param {ImageFromTicketDeleteArgs} args - Arguments to delete one ImageFromTicket.
     * @example
     * // Delete one ImageFromTicket
     * const ImageFromTicket = await prisma.imageFromTicket.delete({
     *   where: {
     *     // ... filter to delete one ImageFromTicket
     *   }
     * })
     * 
    **/
    delete<T extends ImageFromTicketDeleteArgs>(
      args: SelectSubset<T, ImageFromTicketDeleteArgs>
    ): CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket>, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T>>>

    /**
     * Update one ImageFromTicket.
     * @param {ImageFromTicketUpdateArgs} args - Arguments to update one ImageFromTicket.
     * @example
     * // Update one ImageFromTicket
     * const imageFromTicket = await prisma.imageFromTicket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageFromTicketUpdateArgs>(
      args: SelectSubset<T, ImageFromTicketUpdateArgs>
    ): CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket>, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T>>>

    /**
     * Delete zero or more ImageFromTickets.
     * @param {ImageFromTicketDeleteManyArgs} args - Arguments to filter ImageFromTickets to delete.
     * @example
     * // Delete a few ImageFromTickets
     * const { count } = await prisma.imageFromTicket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageFromTicketDeleteManyArgs>(
      args?: SelectSubset<T, ImageFromTicketDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageFromTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFromTicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageFromTickets
     * const imageFromTicket = await prisma.imageFromTicket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageFromTicketUpdateManyArgs>(
      args: SelectSubset<T, ImageFromTicketUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ImageFromTicket.
     * @param {ImageFromTicketUpsertArgs} args - Arguments to update or create a ImageFromTicket.
     * @example
     * // Update or create a ImageFromTicket
     * const imageFromTicket = await prisma.imageFromTicket.upsert({
     *   create: {
     *     // ... data to create a ImageFromTicket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageFromTicket we want to update
     *   }
     * })
    **/
    upsert<T extends ImageFromTicketUpsertArgs>(
      args: SelectSubset<T, ImageFromTicketUpsertArgs>
    ): CheckSelect<T, Prisma__ImageFromTicketClient<ImageFromTicket>, Prisma__ImageFromTicketClient<ImageFromTicketGetPayload<T>>>

    /**
     * Count the number of ImageFromTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFromTicketCountArgs} args - Arguments to filter ImageFromTickets to count.
     * @example
     * // Count the number of ImageFromTickets
     * const count = await prisma.imageFromTicket.count({
     *   where: {
     *     // ... the filter for the ImageFromTickets we want to count
     *   }
     * })
    **/
    count<T extends ImageFromTicketCountArgs>(
      args?: Subset<T, ImageFromTicketCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageFromTicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageFromTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFromTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageFromTicketAggregateArgs>(args: Subset<T, ImageFromTicketAggregateArgs>): PrismaPromise<GetImageFromTicketAggregateType<T>>

    /**
     * Group by ImageFromTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFromTicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageFromTicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageFromTicketGroupByArgs['orderBy'] }
        : { orderBy?: ImageFromTicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageFromTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageFromTicketGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ImageFromTicket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageFromTicketClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ticket<T extends TicketArgs = {}>(args?: Subset<T, TicketArgs>): CheckSelect<T, Prisma__TicketClient<Ticket | null >, Prisma__TicketClient<TicketGetPayload<T> | null >>;

    imagem<T extends ImageArgs = {}>(args?: Subset<T, ImageArgs>): CheckSelect<T, Prisma__ImageClient<Image | null >, Prisma__ImageClient<ImageGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ImageFromTicket findUnique
   */
  export type ImageFromTicketFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * Throw an Error if a ImageFromTicket can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ImageFromTicket to fetch.
     * 
    **/
    where: ImageFromTicketWhereUniqueInput
  }


  /**
   * ImageFromTicket findFirst
   */
  export type ImageFromTicketFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * Throw an Error if a ImageFromTicket can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ImageFromTicket to fetch.
     * 
    **/
    where?: ImageFromTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageFromTickets to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageFromTicketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageFromTickets.
     * 
    **/
    cursor?: ImageFromTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageFromTickets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageFromTickets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageFromTickets.
     * 
    **/
    distinct?: Enumerable<ImageFromTicketScalarFieldEnum>
  }


  /**
   * ImageFromTicket findMany
   */
  export type ImageFromTicketFindManyArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * Filter, which ImageFromTickets to fetch.
     * 
    **/
    where?: ImageFromTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageFromTickets to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageFromTicketOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ImageFromTickets.
     * 
    **/
    cursor?: ImageFromTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageFromTickets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageFromTickets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageFromTicketScalarFieldEnum>
  }


  /**
   * ImageFromTicket create
   */
  export type ImageFromTicketCreateArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * The data needed to create a ImageFromTicket.
     * 
    **/
    data: XOR<ImageFromTicketCreateInput, ImageFromTicketUncheckedCreateInput>
  }


  /**
   * ImageFromTicket update
   */
  export type ImageFromTicketUpdateArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * The data needed to update a ImageFromTicket.
     * 
    **/
    data: XOR<ImageFromTicketUpdateInput, ImageFromTicketUncheckedUpdateInput>
    /**
     * Choose, which ImageFromTicket to update.
     * 
    **/
    where: ImageFromTicketWhereUniqueInput
  }


  /**
   * ImageFromTicket updateMany
   */
  export type ImageFromTicketUpdateManyArgs = {
    /**
     * The data used to update ImageFromTickets.
     * 
    **/
    data: XOR<ImageFromTicketUpdateManyMutationInput, ImageFromTicketUncheckedUpdateManyInput>
    /**
     * Filter which ImageFromTickets to update
     * 
    **/
    where?: ImageFromTicketWhereInput
  }


  /**
   * ImageFromTicket upsert
   */
  export type ImageFromTicketUpsertArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * The filter to search for the ImageFromTicket to update in case it exists.
     * 
    **/
    where: ImageFromTicketWhereUniqueInput
    /**
     * In case the ImageFromTicket found by the `where` argument doesn't exist, create a new ImageFromTicket with this data.
     * 
    **/
    create: XOR<ImageFromTicketCreateInput, ImageFromTicketUncheckedCreateInput>
    /**
     * In case the ImageFromTicket was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageFromTicketUpdateInput, ImageFromTicketUncheckedUpdateInput>
  }


  /**
   * ImageFromTicket delete
   */
  export type ImageFromTicketDeleteArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
    /**
     * Filter which ImageFromTicket to delete.
     * 
    **/
    where: ImageFromTicketWhereUniqueInput
  }


  /**
   * ImageFromTicket deleteMany
   */
  export type ImageFromTicketDeleteManyArgs = {
    /**
     * Filter which ImageFromTickets to delete
     * 
    **/
    where?: ImageFromTicketWhereInput
  }


  /**
   * ImageFromTicket without action
   */
  export type ImageFromTicketArgs = {
    /**
     * Select specific fields to fetch from the ImageFromTicket
     * 
    **/
    select?: ImageFromTicketSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageFromTicketInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type UserTypeScalarFieldEnum = (typeof UserTypeScalarFieldEnum)[keyof typeof UserTypeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id_userType: 'id_userType'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PasswordScalarFieldEnum: {
    hash: 'hash',
    userId: 'userId'
  };

  export type PasswordScalarFieldEnum = (typeof PasswordScalarFieldEnum)[keyof typeof PasswordScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    name: 'name',
    info: 'info',
    phone: 'phone',
    email: 'email'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    id_user: 'id_user',
    id_pic: 'id_pic'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ContactsOnProfileScalarFieldEnum: {
    id_contact: 'id_contact',
    id_profile: 'id_profile',
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy'
  };

  export type ContactsOnProfileScalarFieldEnum = (typeof ContactsOnProfileScalarFieldEnum)[keyof typeof ContactsOnProfileScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    createdAt: 'createdAt',
    createdBy: 'createdBy'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const PriorityTypeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PriorityTypeScalarFieldEnum = (typeof PriorityTypeScalarFieldEnum)[keyof typeof PriorityTypeScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    title: 'title',
    desc: 'desc',
    id_ticket: 'id_ticket',
    id_user: 'id_user',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const ImageFromTicketScalarFieldEnum: {
    id_ticket: 'id_ticket',
    id_imagem: 'id_imagem',
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy'
  };

  export type ImageFromTicketScalarFieldEnum = (typeof ImageFromTicketScalarFieldEnum)[keyof typeof ImageFromTicketScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserTypeWhereInput = {
    AND?: Enumerable<UserTypeWhereInput>
    OR?: Enumerable<UserTypeWhereInput>
    NOT?: Enumerable<UserTypeWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    users?: UserListRelationFilter
  }

  export type UserTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type UserTypeWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type UserTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: UserTypeCountOrderByAggregateInput
    _max?: UserTypeMaxOrderByAggregateInput
    _min?: UserTypeMinOrderByAggregateInput
  }

  export type UserTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserTypeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userType?: XOR<UserTypeRelationFilter, UserTypeWhereInput> | null
    id_userType?: StringNullableFilter | string | null
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    password?: XOR<PasswordRelationFilter, PasswordWhereInput> | null
    Ticket?: TicketListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userType?: UserTypeOrderByWithRelationInput
    id_userType?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    password?: PasswordOrderByWithRelationInput
    Ticket?: TicketOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id_userType?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    id_userType?: StringNullableWithAggregatesFilter | string | null
  }

  export type PasswordWhereInput = {
    AND?: Enumerable<PasswordWhereInput>
    OR?: Enumerable<PasswordWhereInput>
    NOT?: Enumerable<PasswordWhereInput>
    hash?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
  }

  export type PasswordOrderByWithRelationInput = {
    hash?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type PasswordWhereUniqueInput = {
    userId?: string
  }

  export type PasswordOrderByWithAggregationInput = {
    hash?: SortOrder
    userId?: SortOrder
    _count?: PasswordCountOrderByAggregateInput
    _max?: PasswordMaxOrderByAggregateInput
    _min?: PasswordMinOrderByAggregateInput
  }

  export type PasswordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PasswordScalarWhereWithAggregatesInput>
    OR?: Enumerable<PasswordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PasswordScalarWhereWithAggregatesInput>
    hash?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type ContactWhereInput = {
    AND?: Enumerable<ContactWhereInput>
    OR?: Enumerable<ContactWhereInput>
    NOT?: Enumerable<ContactWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    info?: StringFilter | string
    phone?: BoolFilter | boolean
    email?: BoolFilter | boolean
    profiles?: ContactsOnProfileListRelationFilter
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    info?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    profiles?: ContactsOnProfileOrderByRelationAggregateInput
  }

  export type ContactWhereUniqueInput = {
    id?: string
    info?: string
  }

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    info?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    info?: StringWithAggregatesFilter | string
    phone?: BoolWithAggregatesFilter | boolean
    email?: BoolWithAggregatesFilter | boolean
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: StringFilter | string
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    contacts?: ContactsOnProfileListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    id_user?: StringFilter | string
    profilePic?: XOR<ImageRelationFilter, ImageWhereInput> | null
    id_pic?: StringNullableFilter | string | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contacts?: ContactsOnProfileOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    id_user?: SortOrder
    profilePic?: ImageOrderByWithRelationInput
    id_pic?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    id_user?: string
    id_pic?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    id_user?: SortOrder
    id_pic?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    id_user?: StringWithAggregatesFilter | string
    id_pic?: StringNullableWithAggregatesFilter | string | null
  }

  export type ContactsOnProfileWhereInput = {
    AND?: Enumerable<ContactsOnProfileWhereInput>
    OR?: Enumerable<ContactsOnProfileWhereInput>
    NOT?: Enumerable<ContactsOnProfileWhereInput>
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    id_contact?: StringFilter | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    id_profile?: StringFilter | string
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
  }

  export type ContactsOnProfileOrderByWithRelationInput = {
    contact?: ContactOrderByWithRelationInput
    id_contact?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    id_profile?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ContactsOnProfileWhereUniqueInput = {
    id_contact_id_profile?: ContactsOnProfileId_contactId_profileCompoundUniqueInput
  }

  export type ContactsOnProfileOrderByWithAggregationInput = {
    id_contact?: SortOrder
    id_profile?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    _count?: ContactsOnProfileCountOrderByAggregateInput
    _max?: ContactsOnProfileMaxOrderByAggregateInput
    _min?: ContactsOnProfileMinOrderByAggregateInput
  }

  export type ContactsOnProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactsOnProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactsOnProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactsOnProfileScalarWhereWithAggregatesInput>
    id_contact?: StringWithAggregatesFilter | string
    id_profile?: StringWithAggregatesFilter | string
    assignedAt?: DateTimeWithAggregatesFilter | Date | string
    assignedBy?: StringWithAggregatesFilter | string
  }

  export type ImageWhereInput = {
    AND?: Enumerable<ImageWhereInput>
    OR?: Enumerable<ImageWhereInput>
    NOT?: Enumerable<ImageWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    url?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    createdBy?: StringFilter | string
    Profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    TicketImg?: ImageFromTicketListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    Profile?: ProfileOrderByWithRelationInput
    TicketImg?: ImageFromTicketOrderByRelationAggregateInput
  }

  export type ImageWhereUniqueInput = {
    id?: string
    url?: string
  }

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    createdBy?: StringWithAggregatesFilter | string
  }

  export type PriorityTypeWhereInput = {
    AND?: Enumerable<PriorityTypeWhereInput>
    OR?: Enumerable<PriorityTypeWhereInput>
    NOT?: Enumerable<PriorityTypeWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
  }

  export type PriorityTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PriorityTypeWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type PriorityTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PriorityTypeCountOrderByAggregateInput
    _max?: PriorityTypeMaxOrderByAggregateInput
    _min?: PriorityTypeMinOrderByAggregateInput
  }

  export type PriorityTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PriorityTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<PriorityTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PriorityTypeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type TicketWhereInput = {
    AND?: Enumerable<TicketWhereInput>
    OR?: Enumerable<TicketWhereInput>
    NOT?: Enumerable<TicketWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    desc?: StringFilter | string
    imagens?: ImageFromTicketListRelationFilter
    parentTicket?: XOR<TicketRelationFilter, TicketWhereInput> | null
    id_ticket?: StringNullableFilter | string | null
    subtickets?: TicketListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    id_user?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TicketOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    imagens?: ImageFromTicketOrderByRelationAggregateInput
    parentTicket?: TicketOrderByWithRelationInput
    id_ticket?: SortOrder
    subtickets?: TicketOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketWhereUniqueInput = {
    id?: string
    title?: string
  }

  export type TicketOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    id_ticket?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TicketCountOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TicketScalarWhereWithAggregatesInput>
    OR?: Enumerable<TicketScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TicketScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    id_ticket?: StringNullableWithAggregatesFilter | string | null
    id_user?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ImageFromTicketWhereInput = {
    AND?: Enumerable<ImageFromTicketWhereInput>
    OR?: Enumerable<ImageFromTicketWhereInput>
    NOT?: Enumerable<ImageFromTicketWhereInput>
    ticket?: XOR<TicketRelationFilter, TicketWhereInput>
    id_ticket?: StringFilter | string
    imagem?: XOR<ImageRelationFilter, ImageWhereInput>
    id_imagem?: StringFilter | string
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
  }

  export type ImageFromTicketOrderByWithRelationInput = {
    ticket?: TicketOrderByWithRelationInput
    id_ticket?: SortOrder
    imagem?: ImageOrderByWithRelationInput
    id_imagem?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ImageFromTicketWhereUniqueInput = {
    id_ticket_id_imagem?: ImageFromTicketId_ticketId_imagemCompoundUniqueInput
  }

  export type ImageFromTicketOrderByWithAggregationInput = {
    id_ticket?: SortOrder
    id_imagem?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    _count?: ImageFromTicketCountOrderByAggregateInput
    _max?: ImageFromTicketMaxOrderByAggregateInput
    _min?: ImageFromTicketMinOrderByAggregateInput
  }

  export type ImageFromTicketScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageFromTicketScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageFromTicketScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageFromTicketScalarWhereWithAggregatesInput>
    id_ticket?: StringWithAggregatesFilter | string
    id_imagem?: StringWithAggregatesFilter | string
    assignedAt?: DateTimeWithAggregatesFilter | Date | string
    assignedBy?: StringWithAggregatesFilter | string
  }

  export type UserTypeCreateInput = {
    id?: string
    name: string
    users?: UserCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedCreateInput = {
    id?: string
    name: string
    users?: UserUncheckedCreateNestedManyWithoutUserTypeInput
  }

  export type UserTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutUserTypeInput
  }

  export type UserTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutUserTypeInput
  }

  export type UserTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userType?: UserTypeCreateNestedOneWithoutUsersInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    password?: PasswordCreateNestedOneWithoutUserInput
    Ticket?: TicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    id_userType?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    password?: PasswordUncheckedCreateNestedOneWithoutUserInput
    Ticket?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneWithoutUsersInput
    profile?: ProfileUpdateOneWithoutUserInput
    password?: PasswordUpdateOneWithoutUserInput
    Ticket?: TicketUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id_userType?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserInput
    password?: PasswordUncheckedUpdateOneWithoutUserInput
    Ticket?: TicketUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id_userType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordCreateInput = {
    hash: string
    user: UserCreateNestedOneWithoutPasswordInput
  }

  export type PasswordUncheckedCreateInput = {
    hash: string
    userId: string
  }

  export type PasswordUpdateInput = {
    hash?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPasswordInput
  }

  export type PasswordUncheckedUpdateInput = {
    hash?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PasswordUpdateManyMutationInput = {
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type PasswordUncheckedUpdateManyInput = {
    hash?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    id?: string
    name: string
    info: string
    phone: boolean
    email: boolean
    profiles?: ContactsOnProfileCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    name: string
    info: string
    phone: boolean
    email: boolean
    profiles?: ContactsOnProfileUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    phone?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    profiles?: ContactsOnProfileUpdateManyWithoutContactInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    phone?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    profiles?: ContactsOnProfileUncheckedUpdateManyWithoutContactInput
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    phone?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    phone?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileCreateInput = {
    id?: string
    first_name: string
    last_name: string
    contacts?: ContactsOnProfileCreateNestedManyWithoutProfileInput
    user: UserCreateNestedOneWithoutProfileInput
    profilePic?: ImageCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    first_name: string
    last_name: string
    contacts?: ContactsOnProfileUncheckedCreateNestedManyWithoutProfileInput
    id_user: string
    id_pic?: string | null
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsOnProfileUpdateManyWithoutProfileInput
    user?: UserUpdateOneRequiredWithoutProfileInput
    profilePic?: ImageUpdateOneWithoutProfileInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsOnProfileUncheckedUpdateManyWithoutProfileInput
    id_user?: StringFieldUpdateOperationsInput | string
    id_pic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    id_pic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactsOnProfileCreateInput = {
    contact: ContactCreateNestedOneWithoutProfilesInput
    profile: ProfileCreateNestedOneWithoutContactsInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ContactsOnProfileUncheckedCreateInput = {
    id_contact: string
    id_profile: string
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ContactsOnProfileUpdateInput = {
    contact?: ContactUpdateOneRequiredWithoutProfilesInput
    profile?: ProfileUpdateOneRequiredWithoutContactsInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUncheckedUpdateInput = {
    id_contact?: StringFieldUpdateOperationsInput | string
    id_profile?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUncheckedUpdateManyInput = {
    id_contact?: StringFieldUpdateOperationsInput | string
    id_profile?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateInput = {
    id?: string
    name: string
    url: string
    createdAt?: Date | string
    createdBy: string
    Profile?: ProfileCreateNestedOneWithoutProfilePicInput
    TicketImg?: ImageFromTicketCreateNestedManyWithoutImagemInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    createdAt?: Date | string
    createdBy: string
    Profile?: ProfileUncheckedCreateNestedOneWithoutProfilePicInput
    TicketImg?: ImageFromTicketUncheckedCreateNestedManyWithoutImagemInput
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    Profile?: ProfileUpdateOneWithoutProfilePicInput
    TicketImg?: ImageFromTicketUpdateManyWithoutImagemInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    Profile?: ProfileUncheckedUpdateOneWithoutProfilePicInput
    TicketImg?: ImageFromTicketUncheckedUpdateManyWithoutImagemInput
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type PriorityTypeCreateInput = {
    id?: string
    name: string
  }

  export type PriorityTypeUncheckedCreateInput = {
    id?: string
    name: string
  }

  export type PriorityTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PriorityTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PriorityTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PriorityTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TicketCreateInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketCreateNestedManyWithoutTicketInput
    parentTicket?: TicketCreateNestedOneWithoutSubticketsInput
    subtickets?: TicketCreateNestedManyWithoutParentTicketInput
    user: UserCreateNestedOneWithoutTicketInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUncheckedCreateInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketUncheckedCreateNestedManyWithoutTicketInput
    id_ticket?: string | null
    subtickets?: TicketUncheckedCreateNestedManyWithoutParentTicketInput
    id_user: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUpdateManyWithoutTicketInput
    parentTicket?: TicketUpdateOneWithoutSubticketsInput
    subtickets?: TicketUpdateManyWithoutParentTicketInput
    user?: UserUpdateOneRequiredWithoutTicketInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUncheckedUpdateManyWithoutTicketInput
    id_ticket?: NullableStringFieldUpdateOperationsInput | string | null
    subtickets?: TicketUncheckedUpdateManyWithoutParentTicketInput
    id_user?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    id_ticket?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageFromTicketCreateInput = {
    ticket: TicketCreateNestedOneWithoutImagensInput
    imagem: ImageCreateNestedOneWithoutTicketImgInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ImageFromTicketUncheckedCreateInput = {
    id_ticket: string
    id_imagem: string
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ImageFromTicketUpdateInput = {
    ticket?: TicketUpdateOneRequiredWithoutImagensInput
    imagem?: ImageUpdateOneRequiredWithoutTicketImgInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUncheckedUpdateInput = {
    id_ticket?: StringFieldUpdateOperationsInput | string
    id_imagem?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUncheckedUpdateManyInput = {
    id_ticket?: StringFieldUpdateOperationsInput | string
    id_imagem?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UserTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserTypeRelationFilter = {
    is?: UserTypeWhereInput | null
    isNot?: UserTypeWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type PasswordRelationFilter = {
    is?: PasswordWhereInput | null
    isNot?: PasswordWhereInput | null
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id_userType?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id_userType?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id_userType?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PasswordCountOrderByAggregateInput = {
    hash?: SortOrder
    userId?: SortOrder
  }

  export type PasswordMaxOrderByAggregateInput = {
    hash?: SortOrder
    userId?: SortOrder
  }

  export type PasswordMinOrderByAggregateInput = {
    hash?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ContactsOnProfileListRelationFilter = {
    every?: ContactsOnProfileWhereInput
    some?: ContactsOnProfileWhereInput
    none?: ContactsOnProfileWhereInput
  }

  export type ContactsOnProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    info?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    info?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    info?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ImageRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    id_user?: SortOrder
    id_pic?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    id_user?: SortOrder
    id_pic?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    id_user?: SortOrder
    id_pic?: SortOrder
  }

  export type ContactRelationFilter = {
    is?: ContactWhereInput
    isNot?: ContactWhereInput
  }

  export type ContactsOnProfileId_contactId_profileCompoundUniqueInput = {
    id_contact: string
    id_profile: string
  }

  export type ContactsOnProfileCountOrderByAggregateInput = {
    id_contact?: SortOrder
    id_profile?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ContactsOnProfileMaxOrderByAggregateInput = {
    id_contact?: SortOrder
    id_profile?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ContactsOnProfileMinOrderByAggregateInput = {
    id_contact?: SortOrder
    id_profile?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ImageFromTicketListRelationFilter = {
    every?: ImageFromTicketWhereInput
    some?: ImageFromTicketWhereInput
    none?: ImageFromTicketWhereInput
  }

  export type ImageFromTicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type PriorityTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PriorityTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PriorityTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TicketRelationFilter = {
    is?: TicketWhereInput | null
    isNot?: TicketWhereInput | null
  }

  export type TicketCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    id_ticket?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    id_ticket?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    desc?: SortOrder
    id_ticket?: SortOrder
    id_user?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageFromTicketId_ticketId_imagemCompoundUniqueInput = {
    id_ticket: string
    id_imagem: string
  }

  export type ImageFromTicketCountOrderByAggregateInput = {
    id_ticket?: SortOrder
    id_imagem?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ImageFromTicketMaxOrderByAggregateInput = {
    id_ticket?: SortOrder
    id_imagem?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type ImageFromTicketMinOrderByAggregateInput = {
    id_ticket?: SortOrder
    id_imagem?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type UserCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserTypeInput>, Enumerable<UserUncheckedCreateWithoutUserTypeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserTypeInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutUserTypeInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserTypeInput>, Enumerable<UserUncheckedCreateWithoutUserTypeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserTypeInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutUserTypeInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserTypeInput>, Enumerable<UserUncheckedCreateWithoutUserTypeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserTypeInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutUserTypeInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutUserTypeInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutUserTypeInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutUserTypeInput = {
    create?: XOR<Enumerable<UserCreateWithoutUserTypeInput>, Enumerable<UserUncheckedCreateWithoutUserTypeInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutUserTypeInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutUserTypeInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutUserTypeInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutUserTypeInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserTypeCreateNestedOneWithoutUsersInput = {
    create?: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutUsersInput
    connect?: UserTypeWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type PasswordCreateNestedOneWithoutUserInput = {
    create?: XOR<PasswordCreateWithoutUserInput, PasswordUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordCreateOrConnectWithoutUserInput
    connect?: PasswordWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TicketCreateWithoutUserInput>, Enumerable<TicketUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutUserInput>
    connect?: Enumerable<TicketWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type PasswordUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PasswordCreateWithoutUserInput, PasswordUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordCreateOrConnectWithoutUserInput
    connect?: PasswordWhereUniqueInput
  }

  export type TicketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TicketCreateWithoutUserInput>, Enumerable<TicketUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutUserInput>
    connect?: Enumerable<TicketWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserTypeUpdateOneWithoutUsersInput = {
    create?: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: UserTypeCreateOrConnectWithoutUsersInput
    upsert?: UserTypeUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserTypeWhereUniqueInput
    update?: XOR<UserTypeUpdateWithoutUsersInput, UserTypeUncheckedUpdateWithoutUsersInput>
  }

  export type ProfileUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type PasswordUpdateOneWithoutUserInput = {
    create?: XOR<PasswordCreateWithoutUserInput, PasswordUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordCreateOrConnectWithoutUserInput
    upsert?: PasswordUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: PasswordWhereUniqueInput
    update?: XOR<PasswordUpdateWithoutUserInput, PasswordUncheckedUpdateWithoutUserInput>
  }

  export type TicketUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TicketCreateWithoutUserInput>, Enumerable<TicketUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TicketUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<TicketWhereUniqueInput>
    disconnect?: Enumerable<TicketWhereUniqueInput>
    delete?: Enumerable<TicketWhereUniqueInput>
    connect?: Enumerable<TicketWhereUniqueInput>
    update?: Enumerable<TicketUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TicketUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TicketScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProfileUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type PasswordUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<PasswordCreateWithoutUserInput, PasswordUncheckedCreateWithoutUserInput>
    connectOrCreate?: PasswordCreateOrConnectWithoutUserInput
    upsert?: PasswordUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: PasswordWhereUniqueInput
    update?: XOR<PasswordUpdateWithoutUserInput, PasswordUncheckedUpdateWithoutUserInput>
  }

  export type TicketUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TicketCreateWithoutUserInput>, Enumerable<TicketUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TicketUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<TicketWhereUniqueInput>
    disconnect?: Enumerable<TicketWhereUniqueInput>
    delete?: Enumerable<TicketWhereUniqueInput>
    connect?: Enumerable<TicketWhereUniqueInput>
    update?: Enumerable<TicketUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TicketUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TicketScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutPasswordInput = {
    create?: XOR<UserCreateWithoutPasswordInput, UserUncheckedCreateWithoutPasswordInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordInput = {
    create?: XOR<UserCreateWithoutPasswordInput, UserUncheckedCreateWithoutPasswordInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordInput
    upsert?: UserUpsertWithoutPasswordInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPasswordInput, UserUncheckedUpdateWithoutPasswordInput>
  }

  export type ContactsOnProfileCreateNestedManyWithoutContactInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutContactInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutContactInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
  }

  export type ContactsOnProfileUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutContactInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutContactInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ContactsOnProfileUpdateManyWithoutContactInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutContactInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutContactInput>
    upsert?: Enumerable<ContactsOnProfileUpsertWithWhereUniqueWithoutContactInput>
    set?: Enumerable<ContactsOnProfileWhereUniqueInput>
    disconnect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    delete?: Enumerable<ContactsOnProfileWhereUniqueInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    update?: Enumerable<ContactsOnProfileUpdateWithWhereUniqueWithoutContactInput>
    updateMany?: Enumerable<ContactsOnProfileUpdateManyWithWhereWithoutContactInput>
    deleteMany?: Enumerable<ContactsOnProfileScalarWhereInput>
  }

  export type ContactsOnProfileUncheckedUpdateManyWithoutContactInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutContactInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutContactInput>
    upsert?: Enumerable<ContactsOnProfileUpsertWithWhereUniqueWithoutContactInput>
    set?: Enumerable<ContactsOnProfileWhereUniqueInput>
    disconnect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    delete?: Enumerable<ContactsOnProfileWhereUniqueInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    update?: Enumerable<ContactsOnProfileUpdateWithWhereUniqueWithoutContactInput>
    updateMany?: Enumerable<ContactsOnProfileUpdateManyWithWhereWithoutContactInput>
    deleteMany?: Enumerable<ContactsOnProfileScalarWhereInput>
  }

  export type ContactsOnProfileCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutProfileInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutProfileInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutProfileInput = {
    create?: XOR<ImageCreateWithoutProfileInput, ImageUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ImageCreateOrConnectWithoutProfileInput
    connect?: ImageWhereUniqueInput
  }

  export type ContactsOnProfileUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutProfileInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutProfileInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
  }

  export type ContactsOnProfileUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutProfileInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<ContactsOnProfileUpsertWithWhereUniqueWithoutProfileInput>
    set?: Enumerable<ContactsOnProfileWhereUniqueInput>
    disconnect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    delete?: Enumerable<ContactsOnProfileWhereUniqueInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    update?: Enumerable<ContactsOnProfileUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<ContactsOnProfileUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<ContactsOnProfileScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type ImageUpdateOneWithoutProfileInput = {
    create?: XOR<ImageCreateWithoutProfileInput, ImageUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ImageCreateOrConnectWithoutProfileInput
    upsert?: ImageUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<ImageUpdateWithoutProfileInput, ImageUncheckedUpdateWithoutProfileInput>
  }

  export type ContactsOnProfileUncheckedUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<ContactsOnProfileCreateWithoutProfileInput>, Enumerable<ContactsOnProfileUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ContactsOnProfileCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<ContactsOnProfileUpsertWithWhereUniqueWithoutProfileInput>
    set?: Enumerable<ContactsOnProfileWhereUniqueInput>
    disconnect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    delete?: Enumerable<ContactsOnProfileWhereUniqueInput>
    connect?: Enumerable<ContactsOnProfileWhereUniqueInput>
    update?: Enumerable<ContactsOnProfileUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<ContactsOnProfileUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<ContactsOnProfileScalarWhereInput>
  }

  export type ContactCreateNestedOneWithoutProfilesInput = {
    create?: XOR<ContactCreateWithoutProfilesInput, ContactUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: ContactCreateOrConnectWithoutProfilesInput
    connect?: ContactWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutContactsInput = {
    create?: XOR<ProfileCreateWithoutContactsInput, ProfileUncheckedCreateWithoutContactsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutContactsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ContactUpdateOneRequiredWithoutProfilesInput = {
    create?: XOR<ContactCreateWithoutProfilesInput, ContactUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: ContactCreateOrConnectWithoutProfilesInput
    upsert?: ContactUpsertWithoutProfilesInput
    connect?: ContactWhereUniqueInput
    update?: XOR<ContactUpdateWithoutProfilesInput, ContactUncheckedUpdateWithoutProfilesInput>
  }

  export type ProfileUpdateOneRequiredWithoutContactsInput = {
    create?: XOR<ProfileCreateWithoutContactsInput, ProfileUncheckedCreateWithoutContactsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutContactsInput
    upsert?: ProfileUpsertWithoutContactsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutContactsInput, ProfileUncheckedUpdateWithoutContactsInput>
  }

  export type ProfileCreateNestedOneWithoutProfilePicInput = {
    create?: XOR<ProfileCreateWithoutProfilePicInput, ProfileUncheckedCreateWithoutProfilePicInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfilePicInput
    connect?: ProfileWhereUniqueInput
  }

  export type ImageFromTicketCreateNestedManyWithoutImagemInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutImagemInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutImagemInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutImagemInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutProfilePicInput = {
    create?: XOR<ProfileCreateWithoutProfilePicInput, ProfileUncheckedCreateWithoutProfilePicInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfilePicInput
    connect?: ProfileWhereUniqueInput
  }

  export type ImageFromTicketUncheckedCreateNestedManyWithoutImagemInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutImagemInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutImagemInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutImagemInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
  }

  export type ProfileUpdateOneWithoutProfilePicInput = {
    create?: XOR<ProfileCreateWithoutProfilePicInput, ProfileUncheckedCreateWithoutProfilePicInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfilePicInput
    upsert?: ProfileUpsertWithoutProfilePicInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutProfilePicInput, ProfileUncheckedUpdateWithoutProfilePicInput>
  }

  export type ImageFromTicketUpdateManyWithoutImagemInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutImagemInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutImagemInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutImagemInput>
    upsert?: Enumerable<ImageFromTicketUpsertWithWhereUniqueWithoutImagemInput>
    set?: Enumerable<ImageFromTicketWhereUniqueInput>
    disconnect?: Enumerable<ImageFromTicketWhereUniqueInput>
    delete?: Enumerable<ImageFromTicketWhereUniqueInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
    update?: Enumerable<ImageFromTicketUpdateWithWhereUniqueWithoutImagemInput>
    updateMany?: Enumerable<ImageFromTicketUpdateManyWithWhereWithoutImagemInput>
    deleteMany?: Enumerable<ImageFromTicketScalarWhereInput>
  }

  export type ProfileUncheckedUpdateOneWithoutProfilePicInput = {
    create?: XOR<ProfileCreateWithoutProfilePicInput, ProfileUncheckedCreateWithoutProfilePicInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutProfilePicInput
    upsert?: ProfileUpsertWithoutProfilePicInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutProfilePicInput, ProfileUncheckedUpdateWithoutProfilePicInput>
  }

  export type ImageFromTicketUncheckedUpdateManyWithoutImagemInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutImagemInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutImagemInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutImagemInput>
    upsert?: Enumerable<ImageFromTicketUpsertWithWhereUniqueWithoutImagemInput>
    set?: Enumerable<ImageFromTicketWhereUniqueInput>
    disconnect?: Enumerable<ImageFromTicketWhereUniqueInput>
    delete?: Enumerable<ImageFromTicketWhereUniqueInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
    update?: Enumerable<ImageFromTicketUpdateWithWhereUniqueWithoutImagemInput>
    updateMany?: Enumerable<ImageFromTicketUpdateManyWithWhereWithoutImagemInput>
    deleteMany?: Enumerable<ImageFromTicketScalarWhereInput>
  }

  export type ImageFromTicketCreateNestedManyWithoutTicketInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutTicketInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutTicketInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutTicketInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
  }

  export type TicketCreateNestedOneWithoutSubticketsInput = {
    create?: XOR<TicketCreateWithoutSubticketsInput, TicketUncheckedCreateWithoutSubticketsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutSubticketsInput
    connect?: TicketWhereUniqueInput
  }

  export type TicketCreateNestedManyWithoutParentTicketInput = {
    create?: XOR<Enumerable<TicketCreateWithoutParentTicketInput>, Enumerable<TicketUncheckedCreateWithoutParentTicketInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutParentTicketInput>
    connect?: Enumerable<TicketWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutTicketInput = {
    create?: XOR<UserCreateWithoutTicketInput, UserUncheckedCreateWithoutTicketInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketInput
    connect?: UserWhereUniqueInput
  }

  export type ImageFromTicketUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutTicketInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutTicketInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutTicketInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
  }

  export type TicketUncheckedCreateNestedManyWithoutParentTicketInput = {
    create?: XOR<Enumerable<TicketCreateWithoutParentTicketInput>, Enumerable<TicketUncheckedCreateWithoutParentTicketInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutParentTicketInput>
    connect?: Enumerable<TicketWhereUniqueInput>
  }

  export type ImageFromTicketUpdateManyWithoutTicketInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutTicketInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutTicketInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutTicketInput>
    upsert?: Enumerable<ImageFromTicketUpsertWithWhereUniqueWithoutTicketInput>
    set?: Enumerable<ImageFromTicketWhereUniqueInput>
    disconnect?: Enumerable<ImageFromTicketWhereUniqueInput>
    delete?: Enumerable<ImageFromTicketWhereUniqueInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
    update?: Enumerable<ImageFromTicketUpdateWithWhereUniqueWithoutTicketInput>
    updateMany?: Enumerable<ImageFromTicketUpdateManyWithWhereWithoutTicketInput>
    deleteMany?: Enumerable<ImageFromTicketScalarWhereInput>
  }

  export type TicketUpdateOneWithoutSubticketsInput = {
    create?: XOR<TicketCreateWithoutSubticketsInput, TicketUncheckedCreateWithoutSubticketsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutSubticketsInput
    upsert?: TicketUpsertWithoutSubticketsInput
    disconnect?: boolean
    delete?: boolean
    connect?: TicketWhereUniqueInput
    update?: XOR<TicketUpdateWithoutSubticketsInput, TicketUncheckedUpdateWithoutSubticketsInput>
  }

  export type TicketUpdateManyWithoutParentTicketInput = {
    create?: XOR<Enumerable<TicketCreateWithoutParentTicketInput>, Enumerable<TicketUncheckedCreateWithoutParentTicketInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutParentTicketInput>
    upsert?: Enumerable<TicketUpsertWithWhereUniqueWithoutParentTicketInput>
    set?: Enumerable<TicketWhereUniqueInput>
    disconnect?: Enumerable<TicketWhereUniqueInput>
    delete?: Enumerable<TicketWhereUniqueInput>
    connect?: Enumerable<TicketWhereUniqueInput>
    update?: Enumerable<TicketUpdateWithWhereUniqueWithoutParentTicketInput>
    updateMany?: Enumerable<TicketUpdateManyWithWhereWithoutParentTicketInput>
    deleteMany?: Enumerable<TicketScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutTicketInput = {
    create?: XOR<UserCreateWithoutTicketInput, UserUncheckedCreateWithoutTicketInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketInput
    upsert?: UserUpsertWithoutTicketInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTicketInput, UserUncheckedUpdateWithoutTicketInput>
  }

  export type ImageFromTicketUncheckedUpdateManyWithoutTicketInput = {
    create?: XOR<Enumerable<ImageFromTicketCreateWithoutTicketInput>, Enumerable<ImageFromTicketUncheckedCreateWithoutTicketInput>>
    connectOrCreate?: Enumerable<ImageFromTicketCreateOrConnectWithoutTicketInput>
    upsert?: Enumerable<ImageFromTicketUpsertWithWhereUniqueWithoutTicketInput>
    set?: Enumerable<ImageFromTicketWhereUniqueInput>
    disconnect?: Enumerable<ImageFromTicketWhereUniqueInput>
    delete?: Enumerable<ImageFromTicketWhereUniqueInput>
    connect?: Enumerable<ImageFromTicketWhereUniqueInput>
    update?: Enumerable<ImageFromTicketUpdateWithWhereUniqueWithoutTicketInput>
    updateMany?: Enumerable<ImageFromTicketUpdateManyWithWhereWithoutTicketInput>
    deleteMany?: Enumerable<ImageFromTicketScalarWhereInput>
  }

  export type TicketUncheckedUpdateManyWithoutParentTicketInput = {
    create?: XOR<Enumerable<TicketCreateWithoutParentTicketInput>, Enumerable<TicketUncheckedCreateWithoutParentTicketInput>>
    connectOrCreate?: Enumerable<TicketCreateOrConnectWithoutParentTicketInput>
    upsert?: Enumerable<TicketUpsertWithWhereUniqueWithoutParentTicketInput>
    set?: Enumerable<TicketWhereUniqueInput>
    disconnect?: Enumerable<TicketWhereUniqueInput>
    delete?: Enumerable<TicketWhereUniqueInput>
    connect?: Enumerable<TicketWhereUniqueInput>
    update?: Enumerable<TicketUpdateWithWhereUniqueWithoutParentTicketInput>
    updateMany?: Enumerable<TicketUpdateManyWithWhereWithoutParentTicketInput>
    deleteMany?: Enumerable<TicketScalarWhereInput>
  }

  export type TicketCreateNestedOneWithoutImagensInput = {
    create?: XOR<TicketCreateWithoutImagensInput, TicketUncheckedCreateWithoutImagensInput>
    connectOrCreate?: TicketCreateOrConnectWithoutImagensInput
    connect?: TicketWhereUniqueInput
  }

  export type ImageCreateNestedOneWithoutTicketImgInput = {
    create?: XOR<ImageCreateWithoutTicketImgInput, ImageUncheckedCreateWithoutTicketImgInput>
    connectOrCreate?: ImageCreateOrConnectWithoutTicketImgInput
    connect?: ImageWhereUniqueInput
  }

  export type TicketUpdateOneRequiredWithoutImagensInput = {
    create?: XOR<TicketCreateWithoutImagensInput, TicketUncheckedCreateWithoutImagensInput>
    connectOrCreate?: TicketCreateOrConnectWithoutImagensInput
    upsert?: TicketUpsertWithoutImagensInput
    connect?: TicketWhereUniqueInput
    update?: XOR<TicketUpdateWithoutImagensInput, TicketUncheckedUpdateWithoutImagensInput>
  }

  export type ImageUpdateOneRequiredWithoutTicketImgInput = {
    create?: XOR<ImageCreateWithoutTicketImgInput, ImageUncheckedCreateWithoutTicketImgInput>
    connectOrCreate?: ImageCreateOrConnectWithoutTicketImgInput
    upsert?: ImageUpsertWithoutTicketImgInput
    connect?: ImageWhereUniqueInput
    update?: XOR<ImageUpdateWithoutTicketImgInput, ImageUncheckedUpdateWithoutTicketImgInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserCreateWithoutUserTypeInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    password?: PasswordCreateNestedOneWithoutUserInput
    Ticket?: TicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserTypeInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    password?: PasswordUncheckedCreateNestedOneWithoutUserInput
    Ticket?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserTypeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput>
  }

  export type UserUpsertWithWhereUniqueWithoutUserTypeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUserTypeInput, UserUncheckedUpdateWithoutUserTypeInput>
    create: XOR<UserCreateWithoutUserTypeInput, UserUncheckedCreateWithoutUserTypeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUserTypeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUserTypeInput, UserUncheckedUpdateWithoutUserTypeInput>
  }

  export type UserUpdateManyWithWhereWithoutUserTypeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    id_userType?: StringNullableFilter | string | null
  }

  export type UserTypeCreateWithoutUsersInput = {
    id?: string
    name: string
  }

  export type UserTypeUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
  }

  export type UserTypeCreateOrConnectWithoutUsersInput = {
    where: UserTypeWhereUniqueInput
    create: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    first_name: string
    last_name: string
    contacts?: ContactsOnProfileCreateNestedManyWithoutProfileInput
    profilePic?: ImageCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    first_name: string
    last_name: string
    contacts?: ContactsOnProfileUncheckedCreateNestedManyWithoutProfileInput
    id_pic?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type PasswordCreateWithoutUserInput = {
    hash: string
  }

  export type PasswordUncheckedCreateWithoutUserInput = {
    hash: string
  }

  export type PasswordCreateOrConnectWithoutUserInput = {
    where: PasswordWhereUniqueInput
    create: XOR<PasswordCreateWithoutUserInput, PasswordUncheckedCreateWithoutUserInput>
  }

  export type TicketCreateWithoutUserInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketCreateNestedManyWithoutTicketInput
    parentTicket?: TicketCreateNestedOneWithoutSubticketsInput
    subtickets?: TicketCreateNestedManyWithoutParentTicketInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketUncheckedCreateNestedManyWithoutTicketInput
    id_ticket?: string | null
    subtickets?: TicketUncheckedCreateNestedManyWithoutParentTicketInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketCreateOrConnectWithoutUserInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput>
  }

  export type UserTypeUpsertWithoutUsersInput = {
    update: XOR<UserTypeUpdateWithoutUsersInput, UserTypeUncheckedUpdateWithoutUsersInput>
    create: XOR<UserTypeCreateWithoutUsersInput, UserTypeUncheckedCreateWithoutUsersInput>
  }

  export type UserTypeUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserTypeUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsOnProfileUpdateManyWithoutProfileInput
    profilePic?: ImageUpdateOneWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsOnProfileUncheckedUpdateManyWithoutProfileInput
    id_pic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordUpsertWithoutUserInput = {
    update: XOR<PasswordUpdateWithoutUserInput, PasswordUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordCreateWithoutUserInput, PasswordUncheckedCreateWithoutUserInput>
  }

  export type PasswordUpdateWithoutUserInput = {
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type PasswordUncheckedUpdateWithoutUserInput = {
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUpsertWithWhereUniqueWithoutUserInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutUserInput, TicketUncheckedUpdateWithoutUserInput>
    create: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutUserInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutUserInput, TicketUncheckedUpdateWithoutUserInput>
  }

  export type TicketUpdateManyWithWhereWithoutUserInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutTicketInput>
  }

  export type TicketScalarWhereInput = {
    AND?: Enumerable<TicketScalarWhereInput>
    OR?: Enumerable<TicketScalarWhereInput>
    NOT?: Enumerable<TicketScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    desc?: StringFilter | string
    id_ticket?: StringNullableFilter | string | null
    id_user?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutPasswordInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userType?: UserTypeCreateNestedOneWithoutUsersInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    Ticket?: TicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    id_userType?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Ticket?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordInput, UserUncheckedCreateWithoutPasswordInput>
  }

  export type UserUpsertWithoutPasswordInput = {
    update: XOR<UserUpdateWithoutPasswordInput, UserUncheckedUpdateWithoutPasswordInput>
    create: XOR<UserCreateWithoutPasswordInput, UserUncheckedCreateWithoutPasswordInput>
  }

  export type UserUpdateWithoutPasswordInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneWithoutUsersInput
    profile?: ProfileUpdateOneWithoutUserInput
    Ticket?: TicketUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutPasswordInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id_userType?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Ticket?: TicketUncheckedUpdateManyWithoutUserInput
  }

  export type ContactsOnProfileCreateWithoutContactInput = {
    profile: ProfileCreateNestedOneWithoutContactsInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ContactsOnProfileUncheckedCreateWithoutContactInput = {
    id_profile: string
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ContactsOnProfileCreateOrConnectWithoutContactInput = {
    where: ContactsOnProfileWhereUniqueInput
    create: XOR<ContactsOnProfileCreateWithoutContactInput, ContactsOnProfileUncheckedCreateWithoutContactInput>
  }

  export type ContactsOnProfileUpsertWithWhereUniqueWithoutContactInput = {
    where: ContactsOnProfileWhereUniqueInput
    update: XOR<ContactsOnProfileUpdateWithoutContactInput, ContactsOnProfileUncheckedUpdateWithoutContactInput>
    create: XOR<ContactsOnProfileCreateWithoutContactInput, ContactsOnProfileUncheckedCreateWithoutContactInput>
  }

  export type ContactsOnProfileUpdateWithWhereUniqueWithoutContactInput = {
    where: ContactsOnProfileWhereUniqueInput
    data: XOR<ContactsOnProfileUpdateWithoutContactInput, ContactsOnProfileUncheckedUpdateWithoutContactInput>
  }

  export type ContactsOnProfileUpdateManyWithWhereWithoutContactInput = {
    where: ContactsOnProfileScalarWhereInput
    data: XOR<ContactsOnProfileUpdateManyMutationInput, ContactsOnProfileUncheckedUpdateManyWithoutProfilesInput>
  }

  export type ContactsOnProfileScalarWhereInput = {
    AND?: Enumerable<ContactsOnProfileScalarWhereInput>
    OR?: Enumerable<ContactsOnProfileScalarWhereInput>
    NOT?: Enumerable<ContactsOnProfileScalarWhereInput>
    id_contact?: StringFilter | string
    id_profile?: StringFilter | string
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
  }

  export type ContactsOnProfileCreateWithoutProfileInput = {
    contact: ContactCreateNestedOneWithoutProfilesInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ContactsOnProfileUncheckedCreateWithoutProfileInput = {
    id_contact: string
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ContactsOnProfileCreateOrConnectWithoutProfileInput = {
    where: ContactsOnProfileWhereUniqueInput
    create: XOR<ContactsOnProfileCreateWithoutProfileInput, ContactsOnProfileUncheckedCreateWithoutProfileInput>
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userType?: UserTypeCreateNestedOneWithoutUsersInput
    password?: PasswordCreateNestedOneWithoutUserInput
    Ticket?: TicketCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    id_userType?: string | null
    password?: PasswordUncheckedCreateNestedOneWithoutUserInput
    Ticket?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type ImageCreateWithoutProfileInput = {
    id?: string
    name: string
    url: string
    createdAt?: Date | string
    createdBy: string
    TicketImg?: ImageFromTicketCreateNestedManyWithoutImagemInput
  }

  export type ImageUncheckedCreateWithoutProfileInput = {
    id?: string
    name: string
    url: string
    createdAt?: Date | string
    createdBy: string
    TicketImg?: ImageFromTicketUncheckedCreateNestedManyWithoutImagemInput
  }

  export type ImageCreateOrConnectWithoutProfileInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutProfileInput, ImageUncheckedCreateWithoutProfileInput>
  }

  export type ContactsOnProfileUpsertWithWhereUniqueWithoutProfileInput = {
    where: ContactsOnProfileWhereUniqueInput
    update: XOR<ContactsOnProfileUpdateWithoutProfileInput, ContactsOnProfileUncheckedUpdateWithoutProfileInput>
    create: XOR<ContactsOnProfileCreateWithoutProfileInput, ContactsOnProfileUncheckedCreateWithoutProfileInput>
  }

  export type ContactsOnProfileUpdateWithWhereUniqueWithoutProfileInput = {
    where: ContactsOnProfileWhereUniqueInput
    data: XOR<ContactsOnProfileUpdateWithoutProfileInput, ContactsOnProfileUncheckedUpdateWithoutProfileInput>
  }

  export type ContactsOnProfileUpdateManyWithWhereWithoutProfileInput = {
    where: ContactsOnProfileScalarWhereInput
    data: XOR<ContactsOnProfileUpdateManyMutationInput, ContactsOnProfileUncheckedUpdateManyWithoutContactsInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneWithoutUsersInput
    password?: PasswordUpdateOneWithoutUserInput
    Ticket?: TicketUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id_userType?: NullableStringFieldUpdateOperationsInput | string | null
    password?: PasswordUncheckedUpdateOneWithoutUserInput
    Ticket?: TicketUncheckedUpdateManyWithoutUserInput
  }

  export type ImageUpsertWithoutProfileInput = {
    update: XOR<ImageUpdateWithoutProfileInput, ImageUncheckedUpdateWithoutProfileInput>
    create: XOR<ImageCreateWithoutProfileInput, ImageUncheckedCreateWithoutProfileInput>
  }

  export type ImageUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    TicketImg?: ImageFromTicketUpdateManyWithoutImagemInput
  }

  export type ImageUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    TicketImg?: ImageFromTicketUncheckedUpdateManyWithoutImagemInput
  }

  export type ContactCreateWithoutProfilesInput = {
    id?: string
    name: string
    info: string
    phone: boolean
    email: boolean
  }

  export type ContactUncheckedCreateWithoutProfilesInput = {
    id?: string
    name: string
    info: string
    phone: boolean
    email: boolean
  }

  export type ContactCreateOrConnectWithoutProfilesInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutProfilesInput, ContactUncheckedCreateWithoutProfilesInput>
  }

  export type ProfileCreateWithoutContactsInput = {
    id?: string
    first_name: string
    last_name: string
    user: UserCreateNestedOneWithoutProfileInput
    profilePic?: ImageCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutContactsInput = {
    id?: string
    first_name: string
    last_name: string
    id_user: string
    id_pic?: string | null
  }

  export type ProfileCreateOrConnectWithoutContactsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutContactsInput, ProfileUncheckedCreateWithoutContactsInput>
  }

  export type ContactUpsertWithoutProfilesInput = {
    update: XOR<ContactUpdateWithoutProfilesInput, ContactUncheckedUpdateWithoutProfilesInput>
    create: XOR<ContactCreateWithoutProfilesInput, ContactUncheckedCreateWithoutProfilesInput>
  }

  export type ContactUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    phone?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    info?: StringFieldUpdateOperationsInput | string
    phone?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileUpsertWithoutContactsInput = {
    update: XOR<ProfileUpdateWithoutContactsInput, ProfileUncheckedUpdateWithoutContactsInput>
    create: XOR<ProfileCreateWithoutContactsInput, ProfileUncheckedCreateWithoutContactsInput>
  }

  export type ProfileUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfileInput
    profilePic?: ImageUpdateOneWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    id_pic?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateWithoutProfilePicInput = {
    id?: string
    first_name: string
    last_name: string
    contacts?: ContactsOnProfileCreateNestedManyWithoutProfileInput
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutProfilePicInput = {
    id?: string
    first_name: string
    last_name: string
    contacts?: ContactsOnProfileUncheckedCreateNestedManyWithoutProfileInput
    id_user: string
  }

  export type ProfileCreateOrConnectWithoutProfilePicInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutProfilePicInput, ProfileUncheckedCreateWithoutProfilePicInput>
  }

  export type ImageFromTicketCreateWithoutImagemInput = {
    ticket: TicketCreateNestedOneWithoutImagensInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ImageFromTicketUncheckedCreateWithoutImagemInput = {
    id_ticket: string
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ImageFromTicketCreateOrConnectWithoutImagemInput = {
    where: ImageFromTicketWhereUniqueInput
    create: XOR<ImageFromTicketCreateWithoutImagemInput, ImageFromTicketUncheckedCreateWithoutImagemInput>
  }

  export type ProfileUpsertWithoutProfilePicInput = {
    update: XOR<ProfileUpdateWithoutProfilePicInput, ProfileUncheckedUpdateWithoutProfilePicInput>
    create: XOR<ProfileCreateWithoutProfilePicInput, ProfileUncheckedCreateWithoutProfilePicInput>
  }

  export type ProfileUpdateWithoutProfilePicInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsOnProfileUpdateManyWithoutProfileInput
    user?: UserUpdateOneRequiredWithoutProfileInput
  }

  export type ProfileUncheckedUpdateWithoutProfilePicInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contacts?: ContactsOnProfileUncheckedUpdateManyWithoutProfileInput
    id_user?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUpsertWithWhereUniqueWithoutImagemInput = {
    where: ImageFromTicketWhereUniqueInput
    update: XOR<ImageFromTicketUpdateWithoutImagemInput, ImageFromTicketUncheckedUpdateWithoutImagemInput>
    create: XOR<ImageFromTicketCreateWithoutImagemInput, ImageFromTicketUncheckedCreateWithoutImagemInput>
  }

  export type ImageFromTicketUpdateWithWhereUniqueWithoutImagemInput = {
    where: ImageFromTicketWhereUniqueInput
    data: XOR<ImageFromTicketUpdateWithoutImagemInput, ImageFromTicketUncheckedUpdateWithoutImagemInput>
  }

  export type ImageFromTicketUpdateManyWithWhereWithoutImagemInput = {
    where: ImageFromTicketScalarWhereInput
    data: XOR<ImageFromTicketUpdateManyMutationInput, ImageFromTicketUncheckedUpdateManyWithoutTicketImgInput>
  }

  export type ImageFromTicketScalarWhereInput = {
    AND?: Enumerable<ImageFromTicketScalarWhereInput>
    OR?: Enumerable<ImageFromTicketScalarWhereInput>
    NOT?: Enumerable<ImageFromTicketScalarWhereInput>
    id_ticket?: StringFilter | string
    id_imagem?: StringFilter | string
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
  }

  export type ImageFromTicketCreateWithoutTicketInput = {
    imagem: ImageCreateNestedOneWithoutTicketImgInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ImageFromTicketUncheckedCreateWithoutTicketInput = {
    id_imagem: string
    assignedAt?: Date | string
    assignedBy: string
  }

  export type ImageFromTicketCreateOrConnectWithoutTicketInput = {
    where: ImageFromTicketWhereUniqueInput
    create: XOR<ImageFromTicketCreateWithoutTicketInput, ImageFromTicketUncheckedCreateWithoutTicketInput>
  }

  export type TicketCreateWithoutSubticketsInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketCreateNestedManyWithoutTicketInput
    parentTicket?: TicketCreateNestedOneWithoutSubticketsInput
    user: UserCreateNestedOneWithoutTicketInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUncheckedCreateWithoutSubticketsInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketUncheckedCreateNestedManyWithoutTicketInput
    id_ticket?: string | null
    id_user: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketCreateOrConnectWithoutSubticketsInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutSubticketsInput, TicketUncheckedCreateWithoutSubticketsInput>
  }

  export type TicketCreateWithoutParentTicketInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketCreateNestedManyWithoutTicketInput
    subtickets?: TicketCreateNestedManyWithoutParentTicketInput
    user: UserCreateNestedOneWithoutTicketInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUncheckedCreateWithoutParentTicketInput = {
    id?: string
    title: string
    desc: string
    imagens?: ImageFromTicketUncheckedCreateNestedManyWithoutTicketInput
    subtickets?: TicketUncheckedCreateNestedManyWithoutParentTicketInput
    id_user: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketCreateOrConnectWithoutParentTicketInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutParentTicketInput, TicketUncheckedCreateWithoutParentTicketInput>
  }

  export type UserCreateWithoutTicketInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userType?: UserTypeCreateNestedOneWithoutUsersInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    password?: PasswordCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTicketInput = {
    id?: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    id_userType?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    password?: PasswordUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTicketInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTicketInput, UserUncheckedCreateWithoutTicketInput>
  }

  export type ImageFromTicketUpsertWithWhereUniqueWithoutTicketInput = {
    where: ImageFromTicketWhereUniqueInput
    update: XOR<ImageFromTicketUpdateWithoutTicketInput, ImageFromTicketUncheckedUpdateWithoutTicketInput>
    create: XOR<ImageFromTicketCreateWithoutTicketInput, ImageFromTicketUncheckedCreateWithoutTicketInput>
  }

  export type ImageFromTicketUpdateWithWhereUniqueWithoutTicketInput = {
    where: ImageFromTicketWhereUniqueInput
    data: XOR<ImageFromTicketUpdateWithoutTicketInput, ImageFromTicketUncheckedUpdateWithoutTicketInput>
  }

  export type ImageFromTicketUpdateManyWithWhereWithoutTicketInput = {
    where: ImageFromTicketScalarWhereInput
    data: XOR<ImageFromTicketUpdateManyMutationInput, ImageFromTicketUncheckedUpdateManyWithoutImagensInput>
  }

  export type TicketUpsertWithoutSubticketsInput = {
    update: XOR<TicketUpdateWithoutSubticketsInput, TicketUncheckedUpdateWithoutSubticketsInput>
    create: XOR<TicketCreateWithoutSubticketsInput, TicketUncheckedCreateWithoutSubticketsInput>
  }

  export type TicketUpdateWithoutSubticketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUpdateManyWithoutTicketInput
    parentTicket?: TicketUpdateOneWithoutSubticketsInput
    user?: UserUpdateOneRequiredWithoutTicketInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateWithoutSubticketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUncheckedUpdateManyWithoutTicketInput
    id_ticket?: NullableStringFieldUpdateOperationsInput | string | null
    id_user?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUpsertWithWhereUniqueWithoutParentTicketInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutParentTicketInput, TicketUncheckedUpdateWithoutParentTicketInput>
    create: XOR<TicketCreateWithoutParentTicketInput, TicketUncheckedCreateWithoutParentTicketInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutParentTicketInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutParentTicketInput, TicketUncheckedUpdateWithoutParentTicketInput>
  }

  export type TicketUpdateManyWithWhereWithoutParentTicketInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutSubticketsInput>
  }

  export type UserUpsertWithoutTicketInput = {
    update: XOR<UserUpdateWithoutTicketInput, UserUncheckedUpdateWithoutTicketInput>
    create: XOR<UserCreateWithoutTicketInput, UserUncheckedCreateWithoutTicketInput>
  }

  export type UserUpdateWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userType?: UserTypeUpdateOneWithoutUsersInput
    profile?: ProfileUpdateOneWithoutUserInput
    password?: PasswordUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id_userType?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserInput
    password?: PasswordUncheckedUpdateOneWithoutUserInput
  }

  export type TicketCreateWithoutImagensInput = {
    id?: string
    title: string
    desc: string
    parentTicket?: TicketCreateNestedOneWithoutSubticketsInput
    subtickets?: TicketCreateNestedManyWithoutParentTicketInput
    user: UserCreateNestedOneWithoutTicketInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUncheckedCreateWithoutImagensInput = {
    id?: string
    title: string
    desc: string
    id_ticket?: string | null
    subtickets?: TicketUncheckedCreateNestedManyWithoutParentTicketInput
    id_user: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketCreateOrConnectWithoutImagensInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutImagensInput, TicketUncheckedCreateWithoutImagensInput>
  }

  export type ImageCreateWithoutTicketImgInput = {
    id?: string
    name: string
    url: string
    createdAt?: Date | string
    createdBy: string
    Profile?: ProfileCreateNestedOneWithoutProfilePicInput
  }

  export type ImageUncheckedCreateWithoutTicketImgInput = {
    id?: string
    name: string
    url: string
    createdAt?: Date | string
    createdBy: string
    Profile?: ProfileUncheckedCreateNestedOneWithoutProfilePicInput
  }

  export type ImageCreateOrConnectWithoutTicketImgInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutTicketImgInput, ImageUncheckedCreateWithoutTicketImgInput>
  }

  export type TicketUpsertWithoutImagensInput = {
    update: XOR<TicketUpdateWithoutImagensInput, TicketUncheckedUpdateWithoutImagensInput>
    create: XOR<TicketCreateWithoutImagensInput, TicketUncheckedCreateWithoutImagensInput>
  }

  export type TicketUpdateWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    parentTicket?: TicketUpdateOneWithoutSubticketsInput
    subtickets?: TicketUpdateManyWithoutParentTicketInput
    user?: UserUpdateOneRequiredWithoutTicketInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    id_ticket?: NullableStringFieldUpdateOperationsInput | string | null
    subtickets?: TicketUncheckedUpdateManyWithoutParentTicketInput
    id_user?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpsertWithoutTicketImgInput = {
    update: XOR<ImageUpdateWithoutTicketImgInput, ImageUncheckedUpdateWithoutTicketImgInput>
    create: XOR<ImageCreateWithoutTicketImgInput, ImageUncheckedCreateWithoutTicketImgInput>
  }

  export type ImageUpdateWithoutTicketImgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    Profile?: ProfileUpdateOneWithoutProfilePicInput
  }

  export type ImageUncheckedUpdateWithoutTicketImgInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    Profile?: ProfileUncheckedUpdateOneWithoutProfilePicInput
  }

  export type UserUpdateWithoutUserTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserInput
    password?: PasswordUpdateOneWithoutUserInput
    Ticket?: TicketUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUserTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUncheckedUpdateOneWithoutUserInput
    password?: PasswordUncheckedUpdateOneWithoutUserInput
    Ticket?: TicketUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUpdateManyWithoutTicketInput
    parentTicket?: TicketUpdateOneWithoutSubticketsInput
    subtickets?: TicketUpdateManyWithoutParentTicketInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUncheckedUpdateManyWithoutTicketInput
    id_ticket?: NullableStringFieldUpdateOperationsInput | string | null
    subtickets?: TicketUncheckedUpdateManyWithoutParentTicketInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateManyWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    id_ticket?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactsOnProfileUpdateWithoutContactInput = {
    profile?: ProfileUpdateOneRequiredWithoutContactsInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUncheckedUpdateWithoutContactInput = {
    id_profile?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUncheckedUpdateManyWithoutProfilesInput = {
    id_profile?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUpdateWithoutProfileInput = {
    contact?: ContactUpdateOneRequiredWithoutProfilesInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUncheckedUpdateWithoutProfileInput = {
    id_contact?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ContactsOnProfileUncheckedUpdateManyWithoutContactsInput = {
    id_contact?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUpdateWithoutImagemInput = {
    ticket?: TicketUpdateOneRequiredWithoutImagensInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUncheckedUpdateWithoutImagemInput = {
    id_ticket?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUncheckedUpdateManyWithoutTicketImgInput = {
    id_ticket?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUpdateWithoutTicketInput = {
    imagem?: ImageUpdateOneRequiredWithoutTicketImgInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUncheckedUpdateWithoutTicketInput = {
    id_imagem?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageFromTicketUncheckedUpdateManyWithoutImagensInput = {
    id_imagem?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type TicketUpdateWithoutParentTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUpdateManyWithoutTicketInput
    subtickets?: TicketUpdateManyWithoutParentTicketInput
    user?: UserUpdateOneRequiredWithoutTicketInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateWithoutParentTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    imagens?: ImageFromTicketUncheckedUpdateManyWithoutTicketInput
    subtickets?: TicketUncheckedUpdateManyWithoutParentTicketInput
    id_user?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateManyWithoutSubticketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}